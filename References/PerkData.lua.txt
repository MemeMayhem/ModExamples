-- SCRIPTS
local DisplayType = require("Common/DisplayType")
local Util = require("Common/Util")
local GameMechanicTags = require("GamePerkSystem/GameMechanicTags")

-- PERK DATA
local PerkData = {}

-- CONSTANTS
local DEFAULT_RARITY_TOOLTIP = Api.GetTranslationText("combat/rarity/rarity_tooltip")

-- ANCHOR PERK RARITY DATA
PerkData.RARITY_LIST = {
    {
        id = "permanent",
        display_name = Api.GetTranslationText("combat/rarity/permanent"),
        tooltip = Api.GetTranslationText("tooltips/combat/rarity/permanent/content"),
        color_dark = "rarity_common_dark",
        color_light = "rarity_common_light",
        color_label = "rarity_common_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_white_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_relic_white_ipick"),
        weight = 0,
        cost_weight = 0,
    },
    {
        id = "choice",
        display_name = Api.GetTranslationText("combat/rarity/choice"),
        tooltip = Api.GetTranslationText("tooltips/combat/rarity/choice/content"),
        color_dark = "rarity_choice_dark",
        color_light = "rarity_choice_light",
        color_label = "rarity_choice_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_green_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_green_equip_ipick"),
        weight = 0,
        cost_weight = 0,
    },
    {
        id = "common",
        display_name = Api.GetTranslationText("combat/rarity/common"),
        tooltip = DEFAULT_RARITY_TOOLTIP,
        color_dark = "rarity_common_dark",
        color_light = "rarity_common_light",
        color_label = "rarity_common_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_white_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_relic_white_ipick"),
        weight = 100,
        cost_weight = 0,
        Mars_campaign_cost_weight = 10,
    },
    {
        id = "rare",
        display_name = Api.GetTranslationText("combat/rarity/rare"),
        tooltip = DEFAULT_RARITY_TOOLTIP,
        color_dark = "rarity_rare_dark",
        color_light = "rarity_rare_light",
        color_label = "rarity_rare_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_blue_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_relic_blue_ipick"),
        weight = 45,
        cost_weight = 20,
        Mars_campaign_cost_weight = 20,
    },
    {
        id = "epic",
        display_name = Api.GetTranslationText("combat/rarity/epic"),
        tooltip = DEFAULT_RARITY_TOOLTIP,
        color_dark = "rarity_epic_dark",
        color_light = "rarity_epic_light",
        color_label = "rarity_epic_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_purple_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_relic_purple_ipick"),
        weight = 20,
        cost_weight = 40,
        Mars_campaign_cost_weight = 30,
    },
    {
        id = "legendary",
        display_name = Api.GetTranslationText("combat/rarity/legendary"),
        tooltip = DEFAULT_RARITY_TOOLTIP,
        color_dark = "rarity_legendary_dark",
        color_light = "rarity_legendary_light",
        color_label = "rarity_legendary_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_yellow_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_yellow_equip_ipick"),
        weight = 8,
        cost_weight = 60,
        Mars_campaign_cost_weight = 40,
    },
    {
        id = "divine",
        display_name = Api.GetTranslationText("combat/rarity/divine"),
        tooltip = DEFAULT_RARITY_TOOLTIP,
        color_dark = "rarity_divine_dark",
        color_light = "rarity_divine_light",
        color_label = "rarity_divine_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_red_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_yellow_equip_ipick"),
        weight = 8,
        cost_weight = 60,
        Mars_campaign_cost_weight = 50,
    },
    {
        id = "combo",
        display_name = Api.GetTranslationText("combat/rarity/combo"),
        tooltip = Api.GetTranslationText("tooltips/combat/rarity/combo/content"),
        color_dark = "rarity_legendary_dark",
        color_light = "rarity_legendary_light",
        color_label = "rarity_legendary_label",
        perk_discovery_background = DCEI.Texture("flat_icon_circle_panel_perk_red_ipick"),
        relic_discovery_background = DCEI.Texture("flat_icon_panel1_yellow_equip_ipick"),
        weight = 0,
        cost_weight = 0,
    },
}
Util.AssignIndexPropertyToListItems(PerkData.RARITY_LIST)
PerkData.rarity_data = Util.AssignListToTableByKey(PerkData.RARITY_LIST, "id")

local TOOLTIP_TYPES = {
    attribute = "attribute",
    missile = "missile",
    keyword = "keyword",
}

local TAG = GameMechanicTags.TAG
local PERK_TYPE = GameMechanicTags.PERK_TYPE
local ATTACK_ICON = GameMechanicTags.ATTACK_ICON
local RELIC_ICON = GameMechanicTags.RELIC_ICON
local NEWLINE = GameMechanicTags.NEWLINE

-- perk data definitions
PerkData.PERK_LIST = {
    -- ANCHOR ATTRIBUTES
    -- ANCHOR Attack
    {
        id = "gold_on_discovery",
        display_name = Api.GetTranslationText("combat/perk/gold_on_discovery/name"),
        description = Api.GetTranslationText(
            "combat/perk/gold_on_discovery/description",
            { x = TAG.income, y = TAG.discovery }
        ),
        icon = DCEI.Texture("smh_pickaxe"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "discovery",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        scaling_values = {
            amount = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "amount" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "heal_on_rock",
        display_name = Api.GetTranslationText("combat/perk/heal_on_rock/name"),
        description = Api.GetTranslationText("combat/perk/bald/description"),
        icon = DCEI.Texture("smh_whatever_face"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        non_scaling_values = {
            chance = 0.25,
            heal = 5,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "heal" },
            },
        },
    },
    {
        id = "gain_rock_damage",
        display_name = Api.GetTranslationText("combat/perk/gain_rock_damage/name"),
        description = Api.GetTranslationText(
            "combat/perk/gain_rock_damage/description",
            { x = ATTACK_ICON.rock, y = TAG.attack }
        ),
        icon = DCEI.Texture("smh_harder_rock"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
        },
        rarity = "epic",
        is_player_only = true,
        scaling_values = {
            rock_damage = 0.33,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "rock_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "gain_heal_enhancement",
        display_name = Api.GetTranslationText("combat/perk/gain_heal_enhancement/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.heal_enhancement }),
        icon = DCEI.Texture("smh_hospital"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            heal_enhancement = 2,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "heal_enhancement" },
            },
        },
    },
    {
        -- it's not a selectable perk, it's used to apply vulnerable
        id = "debuff_vulnerable",
        display_name = Api.GetTranslationText("combat/attributes/vulnerable/name"),
        behavior = {
            description = TAG.vulnerable .. " [+VAR1]",
            is_positive = false,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_broken_heart_1f494_ipick"),
            modify_attributes = {
                vulnerable = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "vulnerable" },
            },
        },
    },
    {
        id = "apply_vulnerable_on_start",
        display_name = Api.GetTranslationText("combat/perk/apply_vulnerable_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/apply_vulnerable_on_start/description",
            { x = TAG.startup, y = TAG.vulnerable }
        ),
        icon = DCEI.Texture("flat_icon_emoji_broken_heart_1f494_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        scaling_values = {
            debuff_number = 3,
        },
        extra_tooltips = {
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "vulnerable",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "debuff_number" },
            },
        },
    },
    {
        id = "gain_attack",
        display_name = Api.GetTranslationText("combat/perk/gain_attack/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack }),
        icon = DCEI.Texture("flat_icon_emoji_raised_fist_270a_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            attack = 5,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack" },
            },
        },
    },

    {
        id = "keyboard",
        display_name = Api.GetTranslationText("combat/perk/keyboard/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack }),
        icon = DCEI.Texture("smh_keyboard"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "divine",
        modify_attributes = {
            attack = 25,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack" },
            },
        },
    },
    {
        id = "mouse",
        display_name = Api.GetTranslationText("combat/perk/mouse/name"),
        description = Api.GetTranslationText("combat/perk/mouse/description"),
        icon = DCEI.Texture("smh_mouse"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "divine",
        non_scaling_values = {
            chance = 0.15,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "rush_attack_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_attack_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.attack }
        ),
        icon = DCEI.Texture("flat_icon_emoji_cooking_1f373_ipick"),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        rarity = "common",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_cooking_1f373_ipick"),
            actor_event_on_apply = "EventRushAttackOn",
            actor_event_on_remove = "EventRushAttackOff",
            duration = 3,
            modify_attributes = {
                attack = 10,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "rush_crit_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_crit_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.crit_chance }
        ),
        icon = DCEI.Texture("flat_icon_emoji_firecracker_1f9e8_ipick"),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        rarity = "rare",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_firecracker_1f9e8_ipick"),
            duration = 3,
            modify_attributes = {
                crit_chance = 0.1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "crit_chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "rush_buff_enhance",
        display_name = Api.GetTranslationText("combat/perk/rush_buff_enhance/name"),
        description = Api.GetTranslationText("combat/perk/rush_buff_enhance/description", { x = TAG.rush }),
        icon = DCEI.Texture("flat_icon_emoji_1f6a4_ipick"),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            scale = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "scale" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "rush_time_enhance_1",
        display_name = Api.GetTranslationText("combat/perk/rush_time_enhance_1/name"),
        description = Api.GetTranslationText("combat/perk/rush_time_enhance/description", { x = TAG.rush }),
        icon = DCEI.Texture("flat_icon_emoji_1f6f5_ipick"),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        perk_type = PERK_TYPE.perk.id,
        scaling_values = {
            bonus_time = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus_time" },
            },
        },
    },
    {
        id = "rush_time_enhance_2",
        display_name = Api.GetTranslationText("combat/perk/rush_time_enhance_2/name"),
        description = Api.GetTranslationText("combat/perk/rush_time_enhance/description", { x = TAG.rush }),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f6f4_ipick"),
        rarity = "legendary",
        perk_type = PERK_TYPE.perk.id,
        scaling_values = {
            bonus_time = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus_time" },
            },
        },
    },
    {
        id = "attack_quest",
        display_name = Api.GetTranslationText("combat/perk/attack_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.attack }),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_racing_car_1f3ce_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            attack = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack" },
            },
        },
    },
    {
        id = "retaliate_quest",
        display_name = Api.GetTranslationText("combat/perk/retaliate_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.thorns }),
        extra_tooltips = {
            {
                name = "retaliate",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f645_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            retaliate = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "retaliate" },
            },
        },
    },
    {
        id = "block_quest",
        display_name = Api.GetTranslationText("combat/perk/block_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.armor }),
        extra_tooltips = {
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f937_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            block = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "block" },
            },
        },
    },
    {
        id = "dodge_chance_quest",
        display_name = Api.GetTranslationText("combat/perk/dodge_chance_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.dodge_chance }),
        extra_tooltips = {
            {
                name = "dodge_chance",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f938_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            dodge_chance = 0.01,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "dodge_on_crit_quest",
        display_name = Api.GetTranslationText("combat/perk/dodge_on_crit_quest/name"),
        description = Api.GetTranslationText("combat/perk/dodge_on_crit_quest/description", { x = TAG.dodge_chance }),
        extra_tooltips = {
            {
                name = "crit_chance",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "dodge_chance",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_taiji"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            count = 33, -- need to change the max value in attribute data
        },
        scaling_values = {
            bonus = 0.01,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "scaling_values", "bonus" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "heal_quest",
        display_name = Api.GetTranslationText("combat/perk/heal_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.health_regen }),
        icon = DCEI.Texture("flat_icon_emoji_1f9d8_ipick"),
        extra_tooltips = {
            {
                name = "health_per_second",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            health_per_second = 5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_per_second" },
            },
        },
    },
    {
        id = "damage_to_health",
        display_name = Api.GetTranslationText("combat/perk/damage_to_health/name"),
        description = Api.GetTranslationText(
            "combat/perk/damage_to_health/description",
            { x = TAG.health, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_man_biking_1f6b4_200d_2642_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            attack = 1,
        },
        scaling_values = {
            health_maximum = 12,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_man_biking_1f6b4_200d_2642_fe0f_ipick"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_maximum" },
            },
            {
                address = { "non_scaling_values", "attack" },
            },
        },
    },
    {
        id = "income_to_health",
        display_name = Api.GetTranslationText("combat/perk/income_to_health/name"),
        description = Api.GetTranslationText(
            "combat/perk/damage_to_health/description",
            { x = TAG.health, y = TAG.income }
        ),
        extra_tooltips = {
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "income",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_income_to_health"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            income = 1,
        },
        scaling_values = {
            health_maximum = 8,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_income_to_health"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_maximum" },
            },
            {
                address = { "non_scaling_values", "income" },
            },
        },
    },
    -- ANCHOR Health

    {
        id = "bonus_health",
        display_name = Api.GetTranslationText("combat/perk/bonus_health/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.health }),
        icon = DCEI.Texture("flat_icon_emoji_red_heart_2764_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            health_maximum = 300,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "health_maximum" },
            },
        },
    },

    {
        id = "health_regen_percentage",
        display_name = Api.GetTranslationText("combat/perk/health_regen_percentage/name"),
        description = Api.GetTranslationText(
            "combat/perk/health_regen_percentage/description",
            { x = TAG.health, y = TAG.health_regen }
        ),
        extra_tooltips = {
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        blocked_tooltips = {
            health_percentage_per_second = TOOLTIP_TYPES.attribute,
        },
        icon = DCEI.Texture("flat_icon_emoji_troll_1f9cc_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            health_percentage_per_second = 0.02,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "health_percentage_per_second" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "health_maximum_quest",
        display_name = Api.GetTranslationText("combat/perk/health_maximum_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.health }),
        extra_tooltips = {
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_fork_and_knife_with_plate_1f37d_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            health_maximum = 50,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_maximum" },
            },
        },
    },
    {
        id = "health_to_damage",
        display_name = Api.GetTranslationText("combat/perk/health_to_damage/name"),
        description = Api.GetTranslationText(
            "combat/perk/health_to_damage/description",
            { x = TAG.attack, y = TAG.health }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_heart_with_arrow_1f498_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            health_maximum = 360,
        },
        scaling_values = {
            attack = 1,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_heart_with_arrow_1f498_ipick"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack" },
            },
            {
                address = { "non_scaling_values", "health_maximum" },
            },
        },
    },
    -- ANCHOR Attack Speed
    {
        id = "attack_speed_trash",
        display_name = Api.GetTranslationText("combat/perk/attack_speed/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack_speed }),
        icon = DCEI.Texture("flat_icon_emoji_stopwatch_23f1_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            attack_speed = 0.01,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "attack_speed",
        display_name = Api.GetTranslationText("combat/perk/attack_speed/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack_speed }),
        icon = DCEI.Texture("flat_icon_emoji_stopwatch_23f1_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            attack_speed = 0.10,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "speed_luck",
        display_name = Api.GetTranslationText("combat/perk/speed_luck/name"),
        description = Api.GetTranslationText(
            "combat/perk/gain_two_generic/description",
            { x = TAG.attack_speed, y = TAG.luck }
        ),
        icon = DCEI.Texture("flat_icon_emoji_1f9de_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            attack_speed = 0.07,
            luck = 0.07,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "modify_attributes", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "speed_dodge",
        display_name = Api.GetTranslationText("combat/perk/speed_dodge/name"),
        description = Api.GetTranslationText(
            "combat/perk/gain_two_generic/description",
            { x = TAG.attack_speed, y = TAG.dodge_chance }
        ),
        icon = DCEI.Texture("flat_icon_emoji_1f3c3_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        modify_attributes = {
            attack_speed = 0.04,
            dodge_chance = 0.04,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "rush_speed_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_speed_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.attack_speed }
        ),
        icon = DCEI.Texture("flat_icon_emoji_hot_pepper_1f336_fe0f_ipick"),
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        rarity = "rare",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_hot_pepper_1f336_fe0f_ipick"),
            actor_event_on_apply = "EventRushSpeedOn",
            actor_event_on_remove = "EventRushSpeedOff",
            duration = 3,
            modify_attributes = {
                attack_speed = 0.2,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "attack_speed_quest",
        display_name = Api.GetTranslationText("combat/perk/attack_speed_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.attack_speed }),
        extra_tooltips = {
            {
                name = "attack_speed",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_chequered_flag_1f3c1_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            attack_speed = 0.01,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_speed" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "stun_on_start",
        display_name = Api.GetTranslationText("combat/perk/stun_on_start/name"),
        description = Api.GetTranslationText("combat/perk/stun_on_start/description", { x = TAG.startup }),
        icon = DCEI.Texture("smh_slap"),
        extra_tooltips = {
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        behavior = {
            description = Api.GetTranslationText("combat/behavior/stun_on_start/description"),
            buff_bar_icon = DCEI.Texture("smh_slap"),
            actor_event_on_apply = "EventStunOn",
            actor_event_on_remove = "EventStunOff",
            interval = 0.5,
            interval_effect = {
                stun = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "damage_on_start",
        display_name = Api.GetTranslationText("combat/perk/damage_on_start/name"),
        description = Api.GetTranslationText("combat/perk/damage_on_start/description", { x = TAG.startup }),
        icon = DCEI.Texture("flat_icon_emoji_1f590_ipick"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            damage = 0.1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Energy Regen
    {
        id = "energy_regen_trash",
        display_name = Api.GetTranslationText("combat/perk/energy_regen/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.energy_regen }),
        icon = DCEI.Texture("flat_icon_emoji_high_voltage_26a1_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            energy_per_second = 6,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "energy_per_second" },
            },
        },
    },
    {
        id = "energy_regen",
        display_name = Api.GetTranslationText("combat/perk/energy_regen/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.energy_regen }),
        icon = DCEI.Texture("flat_icon_emoji_high_voltage_26a1_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            energy_per_second = 40,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "energy_per_second" },
            },
        },
    },

    {
        id = "ultimate_quest",
        display_name = Api.GetTranslationText("combat/perk/ultimate_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/ultimate_quest/description",
            { x = TAG.overclock, y = TAG.ultimate_damage }
        ),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_practice"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            ultimate_damage = 0.03,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "ultimate_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "ultimate_power",
        display_name = Api.GetTranslationText("combat/perk/ultimate_power/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.ultimate_damage }),
        icon = DCEI.Texture("flat_icon_emoji_cyclone_1f300_ultimate_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            ultimate_damage = 0.3,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "ultimate_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "heal_on_ultimate",
        display_name = Api.GetTranslationText("combat/perk/heal_on_ultimate/name"),
        description = Api.GetTranslationText("combat/perk/heal_on_ultimate/description", { x = TAG.overclock }),
        icon = DCEI.Texture("flat_icon_emoji_beverage_box_1f9c3_ipick"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            heal = 250,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "heal" },
            },
        },
    },

    {
        id = "energy_on_start_rare",
        display_name = Api.GetTranslationText("combat/perk/energy_on_start/name"),
        description = Api.GetTranslationText("combat/perk/energy_on_start/description", { x = TAG.energy }),
        icon = DCEI.Texture("flat_icon_emoji_battery_1f50b_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            start_energy = 200,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "start_energy" },
            },
        },
    },
    {
        id = "energy_on_start",
        display_name = Api.GetTranslationText("combat/perk/energy_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/energy_on_start/description",
            { x = TAG.startup, y = TAG.energy }
        ),
        extra_tooltips = {
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_battery_1f50b_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            start_energy = 300,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "start_energy" },
            },
        },
    },
    -- ANCHOR Health Regen
    {
        id = "health_regen_trash",
        display_name = Api.GetTranslationText("combat/perk/health_regen/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.health_regen }),
        icon = DCEI.Texture("flat_icon_emoji_adhesive_bandage_1fa79_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            health_per_second = 6,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "health_per_second" },
            },
        },
    },
    {
        id = "health_regen",
        display_name = Api.GetTranslationText("combat/perk/health_regen/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.health_regen }),
        icon = DCEI.Texture("flat_icon_emoji_adhesive_bandage_1fa79_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            health_per_second = 25,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "health_per_second" },
            },
        },
    },

    {
        id = "emergency_hold",
        display_name = Api.GetTranslationText("combat/perk/emergency_hold/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_hold/description",
            { x = TAG.emergency, y = RELIC_ICON.face_mask }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "face_mask",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_shell"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        scaling_values = {
            face_mask = 1,
        },
        non_scaling_values = {
            health_maximum_trigger = 0.5,
            time = 60,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_shell"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "face_mask" },
            },
            {
                address = { "non_scaling_values", "time" },
            },
        },
    },
    {
        id = "emergency_heal",
        display_name = Api.GetTranslationText("combat/perk/emergency_heal/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.health_regen }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_mending_heart_2764_fe0f_200d_1fa79_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_mending_heart_2764_fe0f_200d_1fa79_ipick"),
            modify_attributes = {
                health_per_second = 50,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "health_per_second" },
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "emergency_retaliate",
        display_name = Api.GetTranslationText("combat/perk/emergency_retaliate/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.thorns }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f940_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1f940_ipick"),
            modify_attributes = {
                retaliate = 15,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "retaliate" },
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "emergency_attack_speed",
        display_name = Api.GetTranslationText("combat/perk/emergency_attack_speed/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.attack_speed }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_emergency_attack_speed"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_emergency_attack_speed"),
            modify_attributes = {
                attack_speed = 0.2,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "emergency_dodge",
        display_name = Api.GetTranslationText("combat/perk/emergency_dodge/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.dodge_chance }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_emergency_dodge"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_emergency_dodge"),
            modify_attributes = {
                dodge_chance = 0.12,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "emergency_energy_regen",
        display_name = Api.GetTranslationText("combat/perk/emergency_energy_regen/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.energy_regen }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1faab_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1faab_ipick"),
            modify_attributes = {
                energy_per_second = 90,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "energy_per_second" },
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "flex_on_heal",
        display_name = Api.GetTranslationText("combat/perk/flex_on_heal/name"),
        description = Api.GetTranslationText("combat/perk/on_heal_generic/description", { x = ATTACK_ICON.flex }),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_flexed_biceps_1f4aa_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            heal_amount = 120,
        },
        scaling_values = {
            attack_flex = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_flex" },
            },
            {
                address = { "non_scaling_values", "heal_amount" },
            },
        },
    },
    {
        id = "dragon_on_heal",
        display_name = "传说中的白石",
        description = "每收到[VAR2]治疗，发射[VAR1]个" .. ATTACK_ICON.dragon,
        extra_tooltips = {
            {
                name = "attack_dragon",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_dragon_on_heal"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            heal_amount = 120,
        },
        is_player_only = true,
        scaling_values = {
            attack_dragon = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_dragon" },
            },
            {
                address = { "non_scaling_values", "heal_amount" },
            },
        },
    },
    {
        id = "damage_heal",
        display_name = Api.GetTranslationText("combat/perk/damage_heal/name"),
        description = Api.GetTranslationText("combat/perk/damage_heal/description", { x = TAG.attack }),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f356_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            scale = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "scale" },
            },
        },
    },
    {
        id = "oil_on_rock",
        display_name = Api.GetTranslationText("combat/perk/oil_on_rock/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.oil, y = ATTACK_ICON.rock }
        ),
        extra_tooltips = {
            {
                name = "attack_oil",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1fa96_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            chance = 0.1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "oil_on_ult",
        display_name = Api.GetTranslationText("combat/perk/oil_on_ult/name"),
        description = Api.GetTranslationText("combat/perk/oil_on_ult/description", { x = ATTACK_ICON.oil }),
        extra_tooltips = {
            {
                name = "attack_oil",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1fad5_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            attack_oil = 4,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_oil" },
            },
        },
    },
    {
        id = "dragon_on_ultimate",
        display_name = "升龙霸",
        description = "发射大招时，发射[VAR1]个" .. ATTACK_ICON.dragon,
        extra_tooltips = {
            {
                name = "attack_dragon",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_dragon_on_ultimate"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            attack_dragon = 2,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_dragon" },
            },
        },
    },
    {
        id = "frost_on_counter_ult",
        display_name = Api.GetTranslationText("combat/perk/frost_on_counter_ult/name"),
        description = Api.GetTranslationText("combat/perk/frost_on_counter_ult/description", { x = ATTACK_ICON.ice }),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_sneezing_face"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            attack_frost = 20,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_frost" },
            },
        },
    },
    {
        id = "lifesteal_on_flex",
        display_name = Api.GetTranslationText("combat/perk/lifesteal_on_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.vampire, y = ATTACK_ICON.flex }
        ),
        extra_tooltips = {
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f18e_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "brain_on_lifesteal",
        display_name = Api.GetTranslationText("combat/perk/brain_on_lifesteal/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.brain, y = ATTACK_ICON.vampire }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f914_ipick"),

        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "flex_on_oil",
        display_name = Api.GetTranslationText("combat/perk/flex_on_oil/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.flex, y = ATTACK_ICON.oil }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_oil",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f9c6_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "flex_on_poo",
        display_name = Api.GetTranslationText("combat/perk/flex_on_poo/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.flex, y = ATTACK_ICON.poo }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1fa94_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "poo_on_frost",
        display_name = Api.GetTranslationText("combat/perk/poo_on_frost/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.poo, y = ATTACK_ICON.ice }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f630_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "frost_on_crush",
        display_name = Api.GetTranslationText("combat/perk/frost_on_crush/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.ice, y = ATTACK_ICON.axe }
        ),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_26f8_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crush_on_brain",
        display_name = Api.GetTranslationText("combat/perk/crush_on_brain/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.axe, y = ATTACK_ICON.brain }
        ),
        extra_tooltips = {
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f5ff_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.5,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crush_on_retaliate",
        display_name = Api.GetTranslationText("combat/perk/crush_on_retaliate/name"),
        description = Api.GetTranslationText(
            "combat/perk/crush_on_retaliate/description",
            { x = TAG.thorns, y = ATTACK_ICON.axe }
        ),
        extra_tooltips = {
            {
                name = "retaliate",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f504_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            threshold = 30,
        },
        scaling_values = {
            attack_crush = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "threshold" },
            },
            {
                address = { "scaling_values", "attack_crush" },
            },
        },
    },
    {
        id = "frost_on_block",
        display_name = Api.GetTranslationText("combat/perk/frost_on_block/name"),
        description = Api.GetTranslationText(
            "combat/perk/frost_on_block/description",
            { x = TAG.armor, y = ATTACK_ICON.ice }
        ),
        extra_tooltips = {
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f43b_200d_2744_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            threshold = 50,
        },
        scaling_values = {
            attack_frost = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "threshold" },
            },
            {
                address = { "scaling_values", "attack_frost" },
            },
        },
    },
    -- ANCHOR Crit
    {
        id = "crit_trash",
        display_name = Api.GetTranslationText("combat/perk/crit/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_chance }),
        icon = DCEI.Texture("flat_icon_emoji_direct_hit_1f3af_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            crit_chance = 0.01,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crit_legendary",
        display_name = Api.GetTranslationText("combat/perk/crit_legendary/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_chance }),
        icon = DCEI.Texture("flat_icon_emoji_direct_hit_1f3af_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        modify_attributes = {
            crit_chance = 0.07,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crit",
        display_name = Api.GetTranslationText("combat/perk/crit/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_chance }),
        icon = DCEI.Texture("flat_icon_emoji_direct_hit_1f3af_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            crit_chance = 0.05,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "crit_damage",
        display_name = Api.GetTranslationText("combat/perk/crit_damage/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_damage }),
        icon = DCEI.Texture("flat_icon_emoji_anger_symbol_1f4a2_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            crit_damage = 0.66,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "crit_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crit_chance_quest",
        display_name = Api.GetTranslationText("combat/perk/crit_chance_quest/name"),
        description = Api.GetTranslationText("combat/perk/quest_generic/description", { x = TAG.crit_chance }),
        extra_tooltips = {
            {
                name = "crit_chance",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_pouting_face_1f621_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnWin,
        scaling_values = {
            crit_chance = 0.01,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "flex_on_crit",
        display_name = Api.GetTranslationText("combat/perk/flex_on_crit/name"),
        description = Api.GetTranslationText("combat/perk/flex_on_crit/description", { x = ATTACK_ICON.flex }),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_ogre_1f479_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            attack_flex = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_flex" },
            },
        },
    },
    {
        id = "lifesteal_on_crit",
        display_name = Api.GetTranslationText("combat/perk/lifesteal_on_crit/name"),
        description = Api.GetTranslationText("combat/perk/lifesteal_on_crit/description", { x = ATTACK_ICON.vampire }),
        extra_tooltips = {
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f498_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            chance = 0.5,
        },
        scaling_values = {
            attack_lifesteal = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "scaling_values", "attack_lifesteal" },
            },
        },
    },
    -- ANCHOR Dodge
    {
        id = "dodge_trash",
        display_name = Api.GetTranslationText("combat/perk/dodge/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.dodge_chance }),
        icon = DCEI.Texture("flat_icon_emoji_leaf_fluttering_in_wind_1f343_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            dodge_chance = 0.01,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "dodge_legendary",
        display_name = Api.GetTranslationText("combat/perk/dodge_legendary/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.dodge_chance }),
        icon = DCEI.Texture("flat_icon_emoji_leaf_fluttering_in_wind_1f343_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        modify_attributes = {
            dodge_chance = 0.07,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "dodge",
        display_name = Api.GetTranslationText("combat/perk/dodge/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.dodge_chance }),
        icon = DCEI.Texture("flat_icon_emoji_leaf_fluttering_in_wind_1f343_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            dodge_chance = 0.05,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "rush_dodge_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_dodge_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.dodge_chance }
        ),
        icon = DCEI.Texture("flat_icon_emoji_teapot_1fad6_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_teapot_1fad6_ipick"),
            actor_event_on_apply = "EventRushDodgeOn",
            actor_event_on_remove = "EventRushDodgeOff",
            duration = 3,
            modify_attributes = {
                dodge_chance = 0.15,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "rush_block_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_block_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.armor }
        ),
        icon = DCEI.Texture("flat_icon_emoji_1f965_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1f965_ipick"),
            actor_event_on_apply = "EventRushBlockOn",
            actor_event_on_remove = "EventRushBlockOff",
            duration = 3,
            modify_attributes = {
                block = 10,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "block" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "rush_heal_buff",
        display_name = Api.GetTranslationText("combat/perk/rush_heal_buff/name"),
        description = Api.GetTranslationText(
            "combat/perk/rush_buff_generic/description",
            { x = TAG.rush, y = TAG.health_regen }
        ),
        icon = DCEI.Texture("flat_icon_emoji_1f349_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "rare",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1f349_ipick"),
            actor_event_on_apply = "EventRushHealOn",
            actor_event_on_remove = "EventRushHealOff",
            duration = 3,
            modify_attributes = {
                health_per_second = 80,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "health_per_second" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "energy_on_dodge",
        display_name = Api.GetTranslationText("combat/perk/energy_on_dodge/name"),
        description = Api.GetTranslationText("combat/perk/energy_on_dodge/description", { x = TAG.energy }),
        icon = DCEI.Texture("smh_beetle"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            energy_gain = 5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_gain" },
            },
        },
    },
    {
        id = "brain_on_dodge",
        display_name = Api.GetTranslationText("combat/perk/brain_on_dodge/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_dodge_generic/description",
            { x = ATTACK_ICON.brain }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_teacup_without_handle_1f375_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            attack_brain = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_brain" },
            },
        },
    },
    {
        id = "ice_on_dodge",
        display_name = Api.GetTranslationText("combat/perk/ice_on_dodge/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_dodge_generic/description",
            { x = ATTACK_ICON.ice }
        ),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            attack_frost = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_frost" },
            },
        },
    },
    {
        id = "counter_rock",
        display_name = Api.GetTranslationText("combat/perk/counter_rock/name"),
        description = Api.GetTranslationText("combat/perk/counter_rock/description", { x = ATTACK_ICON.rock }),
        extra_tooltips = {
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f939_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            chance = 0.15,
        },
        scaling_values = {
            attack_rock = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "scaling_values", "attack_rock" },
            },
        },
    },
    -- ANCHOR Armor
    {
        id = "gain_block",
        display_name = Api.GetTranslationText("combat/perk/gain_block/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.armor }),
        icon = DCEI.Texture("flat_icon_emoji_shield_1f6e1_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            block = 4,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "block" },
            },
        },
    },
    {
        id = "gain_block_rare",
        display_name = Api.GetTranslationText("combat/perk/gain_block/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.armor }),
        icon = DCEI.Texture("flat_icon_emoji_shield_1f6e1_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            block = 5,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "block" },
            },
        },
    },

    {
        id = "gain_retaliate_trash",
        display_name = Api.GetTranslationText("combat/perk/gain_retaliate/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.thorns }),
        icon = DCEI.Texture("flat_icon_emoji_rose_1f339_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        rarity = "common",
        modify_attributes = {
            retaliate = 1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "retaliate" },
            },
        },
    },
    {
        id = "gain_retaliate",
        display_name = Api.GetTranslationText("combat/perk/gain_retaliate/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.thorns }),
        icon = DCEI.Texture("flat_icon_emoji_rose_1f339_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        rarity = "common",
        modify_attributes = {
            retaliate = 6,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "retaliate" },
            },
        },
    },

    {
        id = "spiky_armor",
        display_name = Api.GetTranslationText("combat/perk/spiky_armor/name"),
        description = Api.GetTranslationText(
            "combat/perk/gain_two_generic/description",
            { x = TAG.armor, y = TAG.thorns }
        ),
        icon = DCEI.Texture("flat_icon_emoji_1f994_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        modify_attributes = {
            retaliate = 4,
            block = 3,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "block" },
            },
            {
                address = { "modify_attributes", "retaliate" },
            },
        },
    },
    {
        id = "emergency_block",
        display_name = Api.GetTranslationText("combat/perk/emergency_block/name"),
        description = Api.GetTranslationText(
            "combat/perk/emergency_generic/description",
            { x = TAG.emergency, y = TAG.armor }
        ),
        extra_tooltips = {
            {
                name = "emergency",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_rescue_workers_helmet_26d1_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnHealthThreshold,
        non_scaling_values = {
            health_maximum_trigger = 0.5,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_rescue_workers_helmet_26d1_fe0f_ipick"),
            modify_attributes = {
                block = 8,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "block" },
            },
            {
                address = { "non_scaling_values", "health_maximum_trigger" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "ultimate_block",
        display_name = Api.GetTranslationText("combat/perk/ultimate_block/name"),
        description = Api.GetTranslationText("combat/perk/ultimate_block/description", { x = TAG.armor }),
        extra_tooltips = {
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_bubble_1fae7_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            armor_coefficient = 10,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "armor_coefficient" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Luck
    {
        id = "gain_luck_trash",
        display_name = Api.GetTranslationText("combat/perk/gain_luck/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.luck }),
        icon = DCEI.Texture("flat_icon_emoji_four_leaf_clover_1f340_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            luck = 0.06,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "gain_luck",
        display_name = Api.GetTranslationText("combat/perk/gain_luck/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.luck }),
        icon = DCEI.Texture("flat_icon_emoji_four_leaf_clover_1f340_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            luck = 0.2,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "gain_luck_epic",
        display_name = Api.GetTranslationText("combat/perk/gain_luck_epic/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.luck }),
        icon = DCEI.Texture("flat_icon_emoji_four_leaf_clover_1f340_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            luck = 0.45,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "gain_income",
        display_name = Api.GetTranslationText("combat/perk/gain_income/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.income }),
        icon = DCEI.Texture("flat_icon_emoji_money_bag_1f4b0_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        modify_attributes = {
            income = 10,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "income" },
            },
        },
    },
    {
        id = "gain_income_rare",
        display_name = Api.GetTranslationText("combat/perk/gain_income/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.income }),
        icon = DCEI.Texture("flat_icon_emoji_money_bag_1f4b0_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            income = 5,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "income" },
            },
        },
    },

    {
        id = "free_roll",
        display_name = Api.GetTranslationText("combat/perk/gain_income/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.free_rolls }),
        icon = DCEI.Texture("flat_icon_emoji_game_die_1f3b2_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            free_rolls = 3,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "free_rolls" },
            },
        },
    },
    {
        id = "shop_quest",
        display_name = Api.GetTranslationText("combat/perk/shop_quest/name"),
        description = Api.GetTranslationText("combat/perk/shop_quest/description", { x = TAG.attack }),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_money_finger"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            attack = 1,
        },
        non_scaling_values = {
            gold_cost = 50,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack" },
            },
            {
                address = { "non_scaling_values", "gold_cost" },
            },
        },
    },
    {
        id = "money",
        display_name = Api.GetTranslationText("combat/perk/money/name"),
        description = Api.GetTranslationText("combat/perk/money/description"),
        icon = DCEI.Texture("flat_icon_cash_goldl3_shop_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            gold = 400,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "gold" },
            },
        },
    },

    {
        id = "illusion_damage",
        display_name = Api.GetTranslationText("combat/perk/illusion_damage/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.illusion_damage }),
        icon = DCEI.Texture("smh_illusion_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        extra_tooltips = {
            {
                name = "illusion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        modify_attributes = {
            illusion_damage = 0.3,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "modify_attributes", "illusion_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "keg_illusion_on_ultimate",
        display_name = Api.GetTranslationText("combat/perk/keg_illusion_on_ultimate/name"),
        description = Api.GetTranslationText(
            "combat/perk/keg_illusion_on_start/description",
            { x = TAG.overclock, y = TAG.illusion }
        ),
        icon = DCEI.Texture("smh_keg_on_ultimate"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        extra_tooltips = {
            {
                name = "illusion",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        scaling_values = {
            illusion = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "illusion" },
            },
        },
    },
    {
        id = "illusion_attackspeed",
        display_name = Api.GetTranslationText("combat/perk/illusion_attackspeed/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.illusion_attackspeed }),
        icon = DCEI.Texture("smh_illusion_benifit"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "illusion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        modify_attributes = {
            illusion_attackspeed = -0.1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "modify_attributes", "illusion_attackspeed" },
            },
        },
    },
    {
        id = "keg_illusion_on_start",
        display_name = Api.GetTranslationText("combat/perk/keg_illusion_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/keg_illusion_on_start/description",
            { x = TAG.startup, y = TAG.illusion }
        ),
        icon = DCEI.Texture("smh_keg_on_start"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        extra_tooltips = {
            {
                name = "illusion",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        scaling_values = {
            illusion = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "illusion" },
            },
        },
    },
    -- ANCHOR ATTACKS
    -- ANCHOR Keg
    {
        id = "attack_wheat",
        display_name = Api.GetTranslationText("combat/perk/attack_wheat/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_wheat/description",
            { x = ATTACK_ICON.wheat, y = TAG.ultimate_damage }
        ),
        icon = DCEI.Texture("smh_wheat"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_wheat = 1,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase/description",
                { x = TAG.ultimate_damage }
            ),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_wheat"),
            non_scaling_attributes = {
                ultimate_damage = 0.02,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "ultimate_damage" },
                is_scalable_behavior_description = true,
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "bonus_wheat",
        display_name = Api.GetTranslationText("combat/perk/bonus_wheat/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_flex/description",
            { x = ATTACK_ICON.wheat, y = TAG.ultimate_damage }
        ),
        extra_tooltips = {
            {
                name = "attack_wheat",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_bonus_wheat"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",

        scaling_values = {
            bonus = 0.02,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "music_on_wheat",
        display_name = Api.GetTranslationText("combat/perk/music_on_wheat/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.music_note, y = ATTACK_ICON.wheat }
        ),
        extra_tooltips = {
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_wheat",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_music_on_wheat"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "super_wheat",
        display_name = Api.GetTranslationText("combat/perk/super_wheat/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_frost/description",
            { x = ATTACK_ICON.wheat, y = TAG.dodge_chance }
        ),
        extra_tooltips = {
            {
                name = "attack_wheat",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "dodge_chance",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_drunk"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        scaling_values = {
            stack_count = 1,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase_duration/description",
                { x = TAG.dodge_chance }
            ),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_drunk"),
            duration = 3,
            non_scaling_attributes = {
                dodge_chance = 0.01,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
            {
                address = { "behavior", "non_scaling_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "hops",
        display_name = Api.GetTranslationText("combat/perk/hops/name"),
        description = Api.GetTranslationText(
            "combat/perk/hops/description",
            { x = TAG.illusion_attack, y = TAG.energy_regen }
        ),
        extra_tooltips = {
            {
                name = "illusion_trigger",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_hops"),
        rarity = "common",
        perk_type = PERK_TYPE.perk.id,
        scaling_values = {
            buff = 2,
        },
        is_player_only = true,
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase_duration/description",
                { x = TAG.energy_regen }
            ),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_hops"),
            non_scaling_attributes = {
                energy_per_second = 1,
            },
            duration = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "buff" },
            },
            {
                address = { "behavior", "duration" },
            },
            {
                address = { "behavior", "non_scaling_attributes", "energy_per_second" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "honey",
        display_name = Api.GetTranslationText("combat/perk/honey/name"),
        description = Api.GetTranslationText(
            "combat/perk/hops/description",
            { x = TAG.illusion_attack, y = TAG.health_regen }
        ),
        extra_tooltips = {
            {
                name = "illusion_trigger",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_honey"),
        rarity = "rare",
        perk_type = PERK_TYPE.perk.id,
        scaling_values = {
            buff = 3,
        },
        is_player_only = true,
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase_duration/description",
                { x = TAG.health_regen }
            ),
            buff_bar_icon = DCEI.Texture("smh_honey"),
            non_scaling_attributes = {
                health_per_second = 1,
            },
            duration = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "buff" },
            },
            {
                address = { "behavior", "duration" },
            },
            {
                address = { "behavior", "non_scaling_attributes", "health_per_second" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "star_fruit",
        display_name = Api.GetTranslationText("combat/perk/star_fruit/name"),
        description = Api.GetTranslationText(
            "combat/perk/star_fruit/description",
            { x = TAG.illusion_attack, y = TAG.coin }
        ),
        extra_tooltips = {
            {
                name = "illusion_trigger",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_star_fruit"),
        rarity = "epic",
        perk_type = PERK_TYPE.perk.id,
        non_scaling_values = {
            gold = 1,
            chance = 0.2,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "gold" },
            },
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "coffee_bean",
        display_name = Api.GetTranslationText("combat/perk/coffee_bean/name"),
        description = Api.GetTranslationText(
            "combat/perk/coffee_bean/description",
            { x = TAG.overclock, y = RELIC_ICON.coffee }
        ),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "coffee",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1fad8_ipick"),
        rarity = "legendary",
        perk_type = PERK_TYPE.perk.id,
        scaling_values = {
            buff = 1,
        },
        behavior = {
            description = Api.GetTranslationText("combat/perk/coffee_bean_behavior/description", { x = TAG.startup }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_hot_beverage_2615_ipick"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "buff" },
            },
        },
    },
    -- ANCHOR Rock
    {
        id = "attack_rock",
        display_name = Api.GetTranslationText("combat/perk/attack_rock/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_rock/description",
            { x = ATTACK_ICON.rock, y = TAG.attack }
        ),
        icon = DCEI.Texture("flat_icon_emoji_rock_1faa8_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_rock = 1,
        },
        exclusive_picks = { "attack_rock", "attack_rock_x2", "attack_rock_x3", "attack_rock_x5" },
        description_replacement_values = {
            {
                address = { "attacks", "attack_rock" },
            },
        },
    },
    {
        id = "attack_rock_x2",
        display_name = Api.GetTranslationText("combat/perk/attack_rock_x2/name"),
        description = Api.GetTranslationText(
            "combat/perk/multiple_attack_generic/description",
            { x = ATTACK_ICON.rock }
        ),
        icon = DCEI.Texture("flat_icon_emoji_rock_1faa8_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "legendary",
        attacks = {
            attack_rock = 2,
        },
        exclusive_picks = { "attack_rock", "attack_rock_x2", "attack_rock_x3", "attack_rock_x5" },
        description_replacement_values = {
            {
                address = { "attacks", "attack_rock" },
            },
        },
    },

    -- ANCHOR Lifesteal
    {
        id = "attack_lifesteal",
        display_name = Api.GetTranslationText("combat/perk/attack_lifesteal/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_lifesteal/description",
            { x = ATTACK_ICON.vampire, y = TAG.health }
        ),
        icon = DCEI.Texture("flat_icon_emoji_vampire_1f9db_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        is_player_only = true,
        attacks = {
            attack_lifesteal = 1,
        },
        non_scaling_values = {
            bonus_heal = 3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus_heal" },
            },
        },
    },

    {
        id = "bonus_lifesteal",
        display_name = Api.GetTranslationText("combat/perk/bonus_lifesteal/name"),
        description = Api.GetTranslationText("combat/perk/bonus_lifesteal/description", { x = ATTACK_ICON.vampire }),
        extra_tooltips = {
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_bat_1f987_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            bonus = 3,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "super_lifesteal",
        display_name = Api.GetTranslationText("combat/perk/super_lifesteal/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_lifesteal/description",
            { x = ATTACK_ICON.vampire, y = TAG.health_regen }
        ),
        is_player_only = true,
        extra_tooltips = {
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "health_per_second",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_coffin_26b0_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            -- used for localization: decreased by [7]
            health_per_second = 7,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_decrease/description",
                { x = TAG.health_regen }
            ),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_coffin_26b0_fe0f_ipick"),
            non_scaling_attributes = {
                health_per_second = -7,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_per_second" },
                is_scalable_behavior_description = true,
            },
        },
    },

    {
        id = "poison_poo",
        display_name = Api.GetTranslationText("combat/perk/poison_poo/name"),
        description = Api.GetTranslationText(
            "combat/perk/poison_poo/description",
            { x = ATTACK_ICON.poo, y = TAG.poison }
        ),
        is_player_only = true,
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "poison",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_poison_poo"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        scaling_values = {
            poison = 1,
        },
        non_scaling_values = {
            health_per_second = 1,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/poison_poo/description",
                { x = TAG.health_regen, y = TAG.energy_regen }
            ),
            buff_bar_icon = DCEI.Texture("smh_poison_poo"),
            non_scaling_attributes = {
                health_per_second = -1,
                energy_per_second = -1,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "health_per_second" },
                is_scalable_behavior_description = true,
            },
            {
                address = { "scaling_values", "poison" },
            },
        },
    },

    {
        id = "leipu_poison",
        display_name = Api.GetTranslationText("combat/perk/leipu_poison/name"),
        description = Api.GetTranslationText(
            "combat/perk/leipu_poison/description",
            { x = TAG.leipu, y = TAG.poison }
        ),
        is_player_only = true,
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "poison",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_leipu_poison"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            poison = 10,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "poison" },
                is_scalable_behavior_description = true,
            },
        },
    },

    {
        id = "frost_enhance_poison",
        display_name = Api.GetTranslationText("combat/perk/frost_enhance_poison/name"),
        description = Api.GetTranslationText(
            "combat/perk/frost_enhance_poison/description",
            { x = ATTACK_ICON.ice, y = TAG.poison }
        ),
        is_player_only = true,
        extra_tooltips = {
            {
                name = "poison",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_frost_enhance_poison"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            frost = 3,
        },
        scaling_values = {
            poison = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "frost" },
            },
            {
                address = { "scaling_values", "poison" },
            },
        },
    },
    {
        id = "poison_ultimate",
        display_name = Api.GetTranslationText("combat/perk/poison_ultimate/name"),
        description = Api.GetTranslationText(
            "combat/perk/poison_ultimate/description",
            { x = ATTACK_ICON.ult, y = TAG.poison }
        ),
        is_player_only = true,
        extra_tooltips = {
            {
                name = "poison",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_poison_ultimate"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            poison = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "poison" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "delay",
        display_name = Api.GetTranslationText("combat/perk/delay/name"),
        description = Api.GetTranslationText(
            "combat/perk/delay/description",
            { x = TAG.distance, y = TAG.attack_speed }
        ),
        extra_tooltips = {
            {
                name = "distance",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_delay"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        non_scaling_values = {
            distance = 300,
        },
        scaling_values = {
            attack_speed = 0.25,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_speed" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "distance" },
            },
        },
    },
    {
        id = "attack_speed_on_stun",
        display_name = Api.GetTranslationText("combat/perk/attack_speed_on_stun/name"),
        description = Api.GetTranslationText("combat/perk/health_regen_on_stun/description", { x = TAG.attack_speed }),
        is_player_only = true,
        icon = DCEI.Texture("smh_attack_speed_on_stun"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        behavior = {
            description = Api.GetTranslationText(
                "combat/perk/attack_speed_on_stun/description",
                { x = TAG.attack_speed }
            ),
            buff_bar_icon = DCEI.Texture("smh_attack_speed_on_stun"),
            non_scaling_attributes = {
                attack_speed = 2,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "poo_on_stun",
        display_name = Api.GetTranslationText("combat/perk/poo_on_stun/name"),
        description = Api.GetTranslationText("combat/perk/poo_on_stun/description", { x = ATTACK_ICON.poo }),
        is_player_only = true,
        icon = DCEI.Texture("smh_poo_on_stun"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            attack_poo = 5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_poo" },
            },
        },
    },
    {
        id = "stun_on_ult",
        display_name = Api.GetTranslationText("combat/perk/stun_on_ult/name"),
        description = Api.GetTranslationText("combat/perk/stun_on_ult/description", { x = ATTACK_ICON.ult }),
        is_player_only = true,
        icon = DCEI.Texture("smh_stun_on_ult"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            stun = 0.5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "stun" },
            },
        },
    },
    -- ANCHOR Horse
    {
        id = "attack_ninja",
        display_name = Api.GetTranslationText("combat/perk/attack_ninja/name"),
        description = Api.GetTranslationText("combat/perk/attack_ninja/description", { x = ATTACK_ICON.ninja }),
        icon = DCEI.Texture("smh_ninja"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "epic",
        attacks = {
            attack_ninja = 1,
        },
        non_scaling_values = {
            energy = -20,
        },
        max_level = 1,
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "energy" },
            },
        },
    },
    {
        id = "recruit_ninja_quest",
        display_name = Api.GetTranslationText("combat/perk/recruit_ninja_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/recruit_ninja_quest/description",
            { x = TAG.ninja_training, y = ATTACK_ICON.ninja }
        ),
        icon = DCEI.Texture("smh_ninja"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        extra_tooltips = {
            {
                name = "attack_ninja",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "recruit_ninja_quest",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        is_player_only = true,
        non_scaling_values = {
            value = 5,
            ninja_request = 7,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "value" },
            },
        },
    },

    -- We use this perk to perk behavior that remove attack_ninja missile from character's deck after attack_ninja launched,
    -- and add it back when combat ends.
    {
        id = "horse_steal",
        -- display_name = Api.GetTranslationText("combat/perk/horse_hop/name"),
        display_name = "horse steal",
        -- description = Api.GetTranslationText(
        --     "combat/perk/horse_hop/description",
        --     { x = ATTACK_ICON.horse, y = TAG.attack_speed }
        -- ),
        description = "This perk is only for perk behavior, thus should be a hidden from users.",
        -- extra_tooltips = {
        --     {
        --         name = "attack_ninja",
        --         type = TOOLTIP_TYPES.missile,
        --     },
        -- },
        -- icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
        icon = DCEI.Texture("smh_ninja"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            modify_attacks = {
                {
                    attack_id = "RUNTIME_DATA",
                },
            },
        },
    },
    {
        id = "horse_steal_success",
        -- display_name = Api.GetTranslationText("combat/perk/horse_hop/name"),
        display_name = "horse steal success",
        -- description = Api.GetTranslationText(
        --     "combat/perk/horse_hop/description",
        --     { x = ATTACK_ICON.horse, y = TAG.attack_speed }
        -- ),
        description = "When a horse steal something to you, there is 10% chance that you get it permanently.",
        -- extra_tooltips = {
        --     {
        --         name = "attack_ninja",
        --         type = TOOLTIP_TYPES.missile,
        --     },
        -- },
        -- icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
        icon = DCEI.Texture("smh_ashamed_face"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            chance = 0.1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "royal_ninja",
        -- display_name = Api.GetTranslationText("combat/perk/horse_hop/name"),
        display_name = Api.GetTranslationText("combat/perk/royal_ninja/name"),
        description = Api.GetTranslationText("combat/perk/royal_ninja/description", { x = ATTACK_ICON.ninja }), -- extra_tooltips = {
        --     {
        --         name = "attack_ninja",
        --         type = TOOLTIP_TYPES.missile,
        --     },
        -- },
        -- icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
        icon = DCEI.Texture("smh_royal_ninja"),
        extra_tooltips = {
            {
                name = "attack_ninja",
                type = TOOLTIP_TYPES.missile,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        max_level = 3,
        non_scaling_values = {
            chance = 0.3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Dragon
    {
        id = "attack_dragon",
        display_name = Api.GetTranslationText("combat/perk/attack_dragon/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_dragon/description",
            { x = ATTACK_ICON.dragon, y = TAG.evo_point }
        ),
        icon = DCEI.Texture("smh_dragon_phase_0"),
        extra_tooltips = {

            {
                name = "evo_point",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.missile.id,
        rarity = "epic",
        is_player_only = true,
        attacks = {
            attack_dragon = 1,
        },
        non_scaling_values = {
            damage = 1,
            damage_increase_per_hit = 1,
        },
    },
    -- ANCHOR Extra Dragon
    {
        id = "evolution_on_start",
        display_name = Api.GetTranslationText("combat/perk/evolution_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/evolution_on_start/description",
            { x = TAG.startup, y = TAG.evo_point }
        ),
        extra_tooltips = {
            {
                name = "evo_point",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_hatching_chick_1f423_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        scaling_values = {
            dragon_hit = 5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "dragon_hit" },
            },
        },
    },
    {
        id = "evolution_quest",
        display_name = Api.GetTranslationText("combat/perk/evolution_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/evolution_quest/description",
            { x = TAG.eupoglycemia, y = ATTACK_ICON.dragon }
        ),
        extra_tooltips = {
            {
                name = "eupoglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "evo_point",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("extra_dragon_hit"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            time = 50,
        },
        scaling_values = {
            attack_dragon = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "time" },
            },
            {
                address = { "scaling_values", "attack_dragon" },
            },
        },
    },
    {
        id = "dragon_extra_grow",
        display_name = Api.GetTranslationText("combat/perk/dragon_extra_grow/name"),
        description = Api.GetTranslationText(
            "combat/perk/dragon_extra_grow/description",
            { x = ATTACK_ICON.dragon, y = TAG.evo_point }
        ),
        extra_tooltips = {
            {
                name = "attack_dragon",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "evo_point",
                type = TOOLTIP_TYPES.keyword,
            },
        },

        icon = DCEI.Texture("smh_dragon_extra_grow"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            extra_hit = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "extra_hit" },
            },
        },
    },
    {
        id = "heal_on_hypoglycemia",
        display_name = Api.GetTranslationText("combat/perk/heal_on_hypoglycemia/name"),
        description = Api.GetTranslationText(
            "combat/perk/heal_on_hypoglycemia/description",
            { x = TAG.hypoglycemia, y = TAG.health_regen, z = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "hypoglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_heal_on_hypoglycemia"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,

        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase/description",
                { x = TAG.health_regen }
            ),
            buff_bar_icon = DCEI.Texture("smh_heal_on_hypoglycemia"),
            non_scaling_attributes = {
                health_per_second = 33,
            },
        },
        modify_attributes = {
            blood_sugar = -1,
        },
        non_scaling_values = {
            blood_sugar = 1,
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "health_per_second" },
                is_scalable_behavior_description = true,
            },
            {
                address = { "non_scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "basal_metabolic_rate",
        display_name = Api.GetTranslationText("combat/perk/basal_metabolic_rate/name"),
        description = Api.GetTranslationText(
            "combat/perk/basal_metabolic_rate/description",
            { x = TAG.blood_sugar, y = TAG.health_regen, z = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_metabolic"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            regen = 2,
        },
        modify_attributes = {
            blood_sugar = -2,
        },
        non_scaling_values = {
            blood_sugar = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "regen" },
            },
            {
                address = { "non_scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "low_ult_cast_on_hypoglycemia",
        display_name = Api.GetTranslationText("combat/perk/low_ult_cast_on_hypoglycemia/name"),
        description = Api.GetTranslationText(
            "combat/perk/low_ult_cast_on_hypoglycemia/description",
            { x = TAG.hypoglycemia, y = ATTACK_ICON.ult, z = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "hypoglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_pill_1f48a_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        max_level = 4,
        non_scaling_values = {
            shorter_swing = 0.3,
            blood_sugar = 3,
        },
        modify_attributes = {
            blood_sugar = -3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "shorter_swing" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "energy_on_hypoglycemia",
        display_name = Api.GetTranslationText("combat/perk/energy_on_hypoglycemia/name"),
        description = Api.GetTranslationText(
            "combat/perk/energy_on_hypoglycemia/description",
            { x = TAG.hypoglycemia, y = ATTACK_ICON.ult, z = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "hypoglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_syringe"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        max_level = 4,
        scaling_values = {
            energy_shortage = 250,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/generic_increase/description", { x = TAG.energy }),
            buff_bar_icon = DCEI.Texture("smh_heal_on_hypoglycemia"),
            non_scaling_attributes = {
                energy_maximum = -250,
            },
        },
        modify_attributes = {
            blood_sugar = -4,
        },
        non_scaling_values = {
            blood_sugar = 4,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_shortage" },
            },
            {
                address = { "non_scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "sugar_on_start",
        display_name = Api.GetTranslationText("combat/perk/sugar_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/sugar_on_start/description",
            { x = TAG.startup, y = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_sugar_on_start"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        non_scaling_values = {
            sugar = 10,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "sugar" },
            },
        },
    },
    {
        id = "sugar_attack",
        display_name = Api.GetTranslationText("combat/perk/sugar_attack/name"),
        description = Api.GetTranslationText(
            "combat/perk/sugar_attack/description",
            { x = TAG.hyperglycemia, y = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "hyperglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_sugar_attack"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            blood_damage = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "blood_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "block_on_hyperglycemia",
        display_name = Api.GetTranslationText("combat/perk/block_on_hyperglycemia/name"),
        description = Api.GetTranslationText(
            "combat/perk/block_on_hyperglycemia/description",
            { x = TAG.hyperglycemia, y = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "hyperglycemia",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_block_on_hyperglycemia"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        max_level = 3,
        scaling_values = {
            blood_shield = 0.3,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "blood_shield" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "coffee_sweetheart",
        display_name = Api.GetTranslationText("combat/perk/coffee_sweetheart/name"),
        description = Api.GetTranslationText(
            "combat/perk/coffee_sweetheart/description",
            { x = TAG.blood_sugar, y = TAG.hyperglycemia }
        ),
        icon = DCEI.Texture("smh_cake"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        extra_tooltips = {
            {
                name = "cake",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        scaling_values = {
            blood_damage = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "blood_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },

    -- ANCHOR Shark
    {
        id = "attack_shark",
        display_name = Api.GetTranslationText("combat/perk/attack_shark/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_shark/description",
            { x = ATTACK_ICON.shark, y = TAG.attack }
        ),
        icon = DCEI.Texture("smh_shark"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_shark = 2,
        },
        non_scaling_values = {
            damage = 0.3,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/poo/description", { x = ATTACK_ICON.poo }),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_pile_of_poo_1f4a9_ipick"),
        },
        description_replacement_values = {
            {
                address = { "attacks", "attack_shark" },
            },
            {
                address = { "non_scaling_values", "damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "shark_group",
        display_name = Api.GetTranslationText("combat/perk/shark_group/name"),
        description = Api.GetTranslationText("combat/perk/shark_group/description", { x = ATTACK_ICON.shark }),
        icon = DCEI.Texture("shark_group"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "legendary",
        extra_tooltips = {
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        scaling_values = {
            attack_shark = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_shark" },
            },
        },
    },
    {
        id = "lifesteal_on_shark",
        display_name = Api.GetTranslationText("combat/perk/lifesteal_on_shark/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.vampire, y = ATTACK_ICON.shark }
        ),
        extra_tooltips = {
            {
                name = "attack_lifesteal",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("lifesteal_on_shark"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.09,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "hungry_shark",
        display_name = Api.GetTranslationText("combat/perk/hungry_shark/name"),
        description = Api.GetTranslationText(
            "combat/perk/hungry_shark/description",
            { x = ATTACK_ICON.shark, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("hungry_shark"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            damage = 0.05,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "damage_on_damage",
        display_name = Api.GetTranslationText("combat/perk/damage_on_damage/name"),
        description = Api.GetTranslationText("combat/perk/damage_on_damage/description"),

        icon = DCEI.Texture("smh_damage_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        non_scaling_values = {
            chance = 0.09,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "vulnerable_on_damage",
        display_name = Api.GetTranslationText("combat/perk/vulnerable_on_damage/name"),
        description = Api.GetTranslationText("combat/perk/vulnerable_on_damage/description", { x = TAG.vulnerable }),
        extra_tooltips = {
            {
                name = "vulnerable",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_vulnerable_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            chance = 0.09,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase_duration/description",
                { x = TAG.vulnerable }
            ),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_broken_heart_1f494_ipick"),
            non_scaling_attributes = {
                vulnerable = 1,
            },
            duration = 3,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
            {
                address = { "behavior", "non_scaling_attributes", "vulnerable" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "shark_on_damage",
        display_name = Api.GetTranslationText("combat/perk/shark_on_damage/name"),
        description = Api.GetTranslationText("combat/perk/shark_on_damage/description", { x = ATTACK_ICON.shark }),
        icon = DCEI.Texture("smh_shark_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        extra_tooltips = {
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        non_scaling_values = {
            chance = 0.09,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "heal_on_damage_legendary",
        display_name = Api.GetTranslationText("combat/perk/heal_on_damage_legendary/name"),
        description = Api.GetTranslationText(
            "combat/perk/heal_on_damage_legendary/description",
            { x = ATTACK_ICON.shark }
        ),
        icon = DCEI.Texture("smh_heal_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            chance = 0.09,
            heal = 3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "heal" },
            },
        },
    },
    {
        id = "gain_thorn_block",
        display_name = Api.GetTranslationText("combat/perk/gain_thorn_block/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.thorn_block }),
        icon = DCEI.Texture("smh_thorn_block"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        max_level = 2,
        modify_attributes = {
            thorn_block = 0.25,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "modify_attributes", "thorn_block" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "shark_quest",
        display_name = Api.GetTranslationText("combat/perk/shark_quest/name"),
        description = Api.GetTranslationText("combat/perk/shark_quest/description", { x = ATTACK_ICON.shark }),
        extra_tooltips = {
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_shark_quest"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,

        non_scaling_values = {
            heal_count = 4444,
        },
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "heal_count" },
            },
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "heart_block",
        display_name = Api.GetTranslationText("combat/perk/heart_block/name"),
        description = Api.GetTranslationText(
            "combat/perk/heart_block/description",
            { x = TAG.thorns, y = TAG.armor, z = TAG.thorn_block }
        ),
        icon = DCEI.Texture("smh_heart_block"),
        extra_tooltips = {
            {
                name = "retaliate",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "thorn_block",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        rarity = "epic",
    },
    {
        id = "thorn_shark",
        display_name = Api.GetTranslationText("combat/perk/thorn_shark/name"),
        description = Api.GetTranslationText(
            "combat/perk/thorn_shark/description",
            { x = ATTACK_ICON.shark, y = TAG.thorns }
        ),
        extra_tooltips = {
            {
                name = "retaliate",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_shark",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_thorn_shark"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.09,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Red Tea
    {
        id = "attack_red_tea",
        display_name = Api.GetTranslationText("combat/perk/attack_red_tea/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_red_tea/description",
            { x = ATTACK_ICON.red_tea, y = TAG.distance }
        ),
        icon = DCEI.Texture("smh_red_tea"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        extra_tooltips = {
            {
                name = "distance",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        attacks = {
            attack_red_tea = 1,
        },
        non_scaling_values = {
            distance = 20,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "attacks", "attack_red_tea" },
            },
            {
                address = { "non_scaling_values", "distance" },
            },
        },
    },
    {
        id = "better_red_tea",
        display_name = Api.GetTranslationText("combat/perk/better_red_tea/name"),
        description = Api.GetTranslationText(
            "combat/perk/better_red_tea/description",
            { x = ATTACK_ICON.red_tea, y = TAG.distance }
        ),
        icon = DCEI.Texture("smh_better_red_tea"),
        perk_type = PERK_TYPE.missile.id,
        extra_tooltips = {
            {
                name = "attack_red_tea",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "distance",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "rare",
        scaling_values = {
            distance = 10,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "distance" },
            },
        },
    },
    {
        id = "poo_on_red_tea",
        display_name = Api.GetTranslationText("combat/perk/poo_on_red_tea/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.poo, y = ATTACK_ICON.red_tea }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_red_tea",
                type = TOOLTIP_TYPES.missile,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_poo_on_red_tea"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "stun_on_red_tea",
        display_name = Api.GetTranslationText("combat/perk/stun_on_red_tea/name"),
        description = Api.GetTranslationText("combat/perk/stun_on_red_tea/description", { x = ATTACK_ICON.red_tea }),
        extra_tooltips = {
            {
                name = "attack_red_tea",
                type = TOOLTIP_TYPES.missile,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_stun_on_red_tea"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            count = 20,
        },
        scaling_values = {
            stun = 0.1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "scaling_values", "stun" },
            },
        },
    },
    {
        id = "leipu_damage",
        display_name = Api.GetTranslationText("combat/perk/leipu_damage/name"),
        description = Api.GetTranslationText("combat/perk/leipu_damage/description", { x = TAG.leipu }),
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_leipu_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        scaling_values = {
            value = 0.2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "value" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "leipu_lifesteal",
        display_name = Api.GetTranslationText("combat/perk/leipu_lifesteal/name"),
        description = Api.GetTranslationText("combat/perk/leipu_lifesteal/description", { x = TAG.leipu }),
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_leipu_lifesteal"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            leipu_lifesteal = 0.2,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "leipu_lifesteal" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "leipu_drain",
        display_name = Api.GetTranslationText("combat/perk/leipu_drain/name"),
        description = Api.GetTranslationText(
            "combat/perk/leipu_drain/description",
            { x = TAG.leipu, y = TAG.energy_regen }
        ),
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_leipu_drain"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            energy_per_second = 50,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_per_second" },
            },
        },
    },
    {
        id = "poo_on_damage",
        display_name = Api.GetTranslationText("combat/perk/poo_on_damage/name"),
        description = Api.GetTranslationText(
            "combat/perk/poo_on_damage/description",
            { x = TAG.distance, y = ATTACK_ICON.poo }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_poo_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            value = 300,
        },
        scaling_values = {
            attack_poo = 5,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "value" },
            },
            {
                address = { "scaling_values", "attack_poo" },
            },
        },
    },
    {
        id = "stun_on_dodge",
        display_name = Api.GetTranslationText("combat/perk/stun_on_dodge/name"),
        description = Api.GetTranslationText("combat/perk/stun_on_dodge/description"),
        is_player_only = true,
        icon = DCEI.Texture("smh_damage_enhance_leipu_time"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        non_scaling_values = {
            chance = 0.5,
            time = 0.1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "time" },
            },
        },
    },
    {
        id = "leipu_damage_instance",
        display_name = Api.GetTranslationText("combat/perk/leipu_damage_instance/name"),
        description = Api.GetTranslationText("combat/perk/leipu_damage_instance/description", { x = TAG.leipu }),
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_leipu_damage_instance"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            leipu_damage_instance = 2,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "leipu_damage_instance" },
            },
        },
    },
    {
        id = "close_miss",
        display_name = Api.GetTranslationText("combat/perk/close_miss/name"),
        description = Api.GetTranslationText(
            "combat/perk/close_miss/description",
            { x = TAG.distance, y = TAG.dodge_chance }
        ),
        is_player_only = true,
        icon = DCEI.Texture("smh_health_maximum_on_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        max_level = 3,
        non_scaling_values = {
            distance = 300,
        },
        scaling_values = {
            dodge_chance = 0.3,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/perk/close_miss/description",
                { x = TAG.distance, y = TAG.dodge_chance }
            ),
            buff_bar_icon = DCEI.Texture("smh_health_maximum_on_damage"),
            non_scaling_attributes = {
                dodge_chance = 0.3,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "distance" },
            },
        },
    },
    {
        id = "leipu_time_enhance",
        display_name = Api.GetTranslationText("combat/perk/leipu_time_enhance/name"),
        description = Api.GetTranslationText("combat/perk/leipu_time_enhance/description", { x = TAG.leipu }),
        extra_tooltips = {
            {
                name = "leipu",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_leipu_time_enhance"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        modify_attributes = {
            leipu_time = 1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "leipu_time" },
            },
        },
    },
    -- ANCHOR burger
    {
        id = "attack_burger",
        display_name = Api.GetTranslationText("combat/perk/attack_burger/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_burger/description",
            { x = ATTACK_ICON.burger, y = TAG.blood_sugar }
        ),
        extra_tooltips = {
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f354_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_burger = 1,
        },
        non_scaling_values = {
            blood_sugar = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "bonus_burger",
        display_name = Api.GetTranslationText("combat/perk/bonus_burger/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_burger/description",
            { x = ATTACK_ICON.burger, y = TAG.blood_sugar }
        ),
        icon = DCEI.Texture("smh_bonus_burger"),
        perk_type = PERK_TYPE.missile.id,
        extra_tooltips = {
            {
                name = "attack_burger",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "blood_sugar",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "legendary",
        scaling_values = {
            blood_sugar = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "blood_sugar" },
            },
        },
    },
    {
        id = "flex_on_burger",
        display_name = Api.GetTranslationText("combat/perk/flex_on_burger/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.flex, y = ATTACK_ICON.burger }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_burger",
                type = TOOLTIP_TYPES.missile,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("smh_flex_on_burger"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "burger_quest",
        display_name = Api.GetTranslationText("combat/perk/burger_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/burger_quest/description",
            { x = ATTACK_ICON.burger, y = RELIC_ICON.fast_food }
        ),
        extra_tooltips = {
            {
                name = "attack_burger",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "fast_food",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_burger_quest"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "rare",
        non_scaling_values = {
            quest_count = 100,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "quest_count" },
            },
        },
    },
    -- ANCHOR Milk
    {
        id = "attack_milk",
        display_name = Api.GetTranslationText("combat/perk/attack_milk/name"),
        description = Api.GetTranslationText("combat/perk/attack_milk/description", { x = ATTACK_ICON.milk }),
        icon = DCEI.Texture("smh_milk"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_milk = 1,
        },
        non_scaling_values = {
            heal = 20,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "attacks", "attack_milk" },
            },
            {
                address = { "non_scaling_values", "heal" },
            },
        },
    },
    {
        id = "better_milk",
        display_name = Api.GetTranslationText("combat/perk/better_milk/name"),
        description = Api.GetTranslationText("combat/perk/better_milk/description", { x = ATTACK_ICON.milk }),
        icon = DCEI.Texture("smh_better_milk"),
        perk_type = PERK_TYPE.missile.id,
        extra_tooltips = {
            {
                name = "attack_milk",
                type = TOOLTIP_TYPES.missile,
            },
        },
        rarity = "rare",
        scaling_values = {
            heal = 10,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "heal" },
            },
        },
    },
    {
        id = "flex_on_milk",
        display_name = Api.GetTranslationText("combat/perk/flex_on_milk/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.flex, y = ATTACK_ICON.milk }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_milk",
                type = TOOLTIP_TYPES.missile,
            },
        },
        is_player_only = true,
        icon = DCEI.Texture("flex_on_milk"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "milk_quest",
        display_name = Api.GetTranslationText("combat/perk/milk_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/milk_quest/description",
            { x = ATTACK_ICON.milk, y = TAG.health_regen }
        ),
        extra_tooltips = {
            {
                name = "attack_milk",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("milk_quest"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "legendary",
        non_scaling_values = {
            quest_count = 10,
        },
        scaling_values = {
            health_per_second = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "quest_count" },
            },
            {
                address = { "scaling_values", "health_per_second" },
            },
        },
    },
    {
        id = "greetings",
        display_name = Api.GetTranslationText("combat/perk/greetings/name"),
        description = Api.GetTranslationText("combat/perk/greetings/description", { x = TAG.speech_bubble }),
        icon = DCEI.Texture("smh_speech_bubble"),
        extra_tooltips = {
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            trash_talk_attack = 20,
        },
        scaling_values = {
            trash_talk_attack = 20,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "modify_attributes", "trash_talk_attack" },
            },
        },
    },
    {
        id = "well_played",
        display_name = Api.GetTranslationText("combat/perk/well_played/name"),
        description = Api.GetTranslationText(
            "combat/perk/well_played/description",
            { x = TAG.overclock, y = TAG.speech_bubble }
        ),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_thumbs_up_1f44d_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
    },
    {
        id = "wow",
        display_name = Api.GetTranslationText("combat/perk/wow/name"),
        description = Api.GetTranslationText("combat/perk/wow/description", { x = TAG.speech_bubble }),
        icon = DCEI.Texture("smh_wow"),
        extra_tooltips = {
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        non_scaling_values = {
            chance = 0.2,
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "thank_you",
        display_name = Api.GetTranslationText("combat/perk/thank_you/name"),
        description = Api.GetTranslationText("combat/perk/thank_you/description", { x = TAG.speech_bubble }),
        icon = DCEI.Texture("smh_thank_you"),
        extra_tooltips = {
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            heal_amount = 666,
        },
        scaling_values = {
            count = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "heal_amount" },
            },
            {
                address = { "scaling_values", "count" },
            },
        },
    },
    {
        id = "ninja_thank_you",
        display_name = Api.GetTranslationText("combat/perk/ninja_thank_you/name"),
        description = Api.GetTranslationText(
            "combat/perk/ninja_thank_you/description",
            { x = ATTACK_ICON.ninja, y = TAG.speech_bubble, z = TAG.ninja_training }
        ),
        extra_tooltips = {
            {
                name = "attack_ninja",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "recruit_ninja_quest",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        non_scaling_values = {
            value = 2,
            trash_talk = 1,
        },

        icon = DCEI.Texture("smh_ninja_thank_you"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "value" },
            },
            {
                address = { "non_scaling_values", "trash_talk" },
            },
        },
    },
    {
        id = "ninja_extra_talk",
        display_name = Api.GetTranslationText("combat/perk/ninja_extra_talk/name"),
        description = Api.GetTranslationText("combat/perk/ninja_extra_talk/description", { x = TAG.speech_bubble }),
        extra_tooltips = {
            {
                name = "trash_talk",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_ninja_extra_talk"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.01,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Frost
    {
        id = "attack_frost",
        display_name = Api.GetTranslationText("combat/perk/attack_frost/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_frost/description",
            { x = ATTACK_ICON.ice, y = TAG.attack_speed }
        ),
        extra_tooltips = {
            {
                name = "attack_speed",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_frost = 1,
        },
        non_scaling_values = {
            -- used for localization: decreased by [x]
            speed_decrease = 0.01,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_decrease_duration/description",
                { x = TAG.attack_speed }
            ),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_ice_1f9ca_ipick"),
            duration = 3,
            non_scaling_attributes = {
                attack_speed = -0.01,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "speed_decrease" },
                is_scalable_behavior_description = true,
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },

    {
        id = "bonus_frost",
        display_name = Api.GetTranslationText("combat/perk/bonus_frost/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_frost/description",
            { x = ATTACK_ICON.ice, y = TAG.attack_speed }
        ),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_speed",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_snowman_2603_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        non_scaling_values = {
            -- used for localization: decreased by [x]
            bonus = 0.01,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "super_frost",
        display_name = Api.GetTranslationText("combat/perk/super_frost/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_frost/description",
            { x = ATTACK_ICON.ice, y = TAG.heal_enhancement }
        ),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "heal_enhancement",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_cold_face_1f976_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",

        scaling_values = {
            stack_count = 1,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase/description",
                { x = TAG.heal_enhancement }
            ),
            buff_bar_icon = DCEI.Texture("smh_hospital"),
            duration = 3,
            is_positive = true,
            non_scaling_attributes = {
                heal_enhancement = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "heal_enhancement" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "retaliate_frost",
        display_name = Api.GetTranslationText("combat/perk/retaliate_frost/name"),
        description = Api.GetTranslationText(
            "combat/perk/retaliate_frost/description",
            { x = ATTACK_ICON.ice, y = TAG.thorns }
        ),
        extra_tooltips = {
            {
                name = "attack_frost",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "retaliate",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_snowflake_2744_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            stack_count = 1,
        },
        behavior = {
            is_positive = true,
            description = TAG.thorns .. " increased by [+VAR1]",
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_rose_1f339_ipick"),
            non_scaling_attributes = {
                retaliate = 2,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "retaliate" },
                is_scalable_behavior_description = true,
            },
        },
    },
    -- ANCHOR Crush
    {
        id = "attack_crush",
        display_name = Api.GetTranslationText("combat/perk/attack_crush/name"),
        description = Api.GetTranslationText("combat/perk/attack_crush/description", { x = ATTACK_ICON.axe }),
        icon = DCEI.Texture("flat_icon_emoji_axe_1fa93_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_crush = 1,
        },
        non_scaling_values = {
            bonus_damage = 40,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus_damage" },
            },
        },
    },

    {
        id = "bonus_crush",
        display_name = Api.GetTranslationText("combat/perk/bonus_crush/name"),
        description = Api.GetTranslationText("combat/perk/bonus_crush/description", { x = ATTACK_ICON.axe }),
        extra_tooltips = {
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_hammer_and_pick_2692_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",

        non_scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "combo_crush",
        display_name = Api.GetTranslationText("combat/perk/combo_crush/name"),
        description = Api.GetTranslationText(
            "combat/perk/combo_crush/description",
            { x = ATTACK_ICON.axe, y = ATTACK_ICON.axe }
        ),
        extra_tooltips = {
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_chains"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "super_crush",
        display_name = Api.GetTranslationText("combat/perk/super_crush/name"),
        description = Api.GetTranslationText("combat/perk/super_crush/description", { x = ATTACK_ICON.axe }),
        extra_tooltips = {
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_dizzy_1f4ab_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        max_level = 1,
        behavior = {
            description = Api.GetTranslationText("combat/behavior/stun_on_start/description"),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_dizzy_1f4ab_ipick"),
            actor_event_on_apply = "EventStunOn",
            actor_event_on_remove = "EventStunOff",
            interval = 0.1,
            interval_effect = {
                stun = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },
    -- ANCHOR Overclock
    {
        id = "restrictions_lifted",
        -- display_name = Api.GetTranslationText("combat/perk/super_crush/name"),
        -- description = Api.GetTranslationText("combat/perk/super_crush/description", { x = ATTACK_ICON.axe }),
        display_name = "Restrictions Lifted",
        description = TAG.overclock .. "gain 30% attack speed for 3s",
        icon = DCEI.Texture("flat_icon_emoji_wrench_1f527_ipick"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnUltmateAttackLaunch,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_wrench_1f527_ipick"),
            duration = 3,
            modify_attributes = {
                attack_speed = 0.3,
            },
        },
    },
    {
        id = "brick_can_fly",
        -- display_name = Api.GetTranslationText("combat/perk/super_crush/name"),
        -- description = Api.GetTranslationText("combat/perk/super_crush/description", { x = ATTACK_ICON.axe }),
        display_name = "Brick Can Fly",
        description = TAG.overclock .. "gain 20 power for 3s",
        icon = DCEI.Texture("flat_icon_emoji_brick_1f9f1_ipick"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnUltmateAttackLaunch,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_brick_1f9f1_ipick"),
            duration = 3,
            modify_attributes = {
                attack = 20,
            },
        },
    },
    {
        id = "burn_for_ferver",
        -- display_name = Api.GetTranslationText("combat/perk/super_crush/name"),
        -- description = Api.GetTranslationText("combat/perk/super_crush/description", { x = ATTACK_ICON.axe }),
        display_name = "Brick Can Fly",
        description = TAG.overclock .. "all your missiles apply 1 fire for 3s",
        icon = DCEI.Texture("flat_icon_emoji_fire_1f525_ipick"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnUltmateAttackLaunch,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_fire_1f525_ipick"),
            duration = 3,
            extra_attack_impacts = {
                attack_oil = 1,
            },
        },
    },
    {
        id = "ignite_jupiter",
        -- display_name = Api.GetTranslationText("combat/perk/super_crush/name"),
        -- description = Api.GetTranslationText("combat/perk/super_crush/description", { x = ATTACK_ICON.axe }),
        display_name = "Ignite Jupiter",
        description = TAG.overclock .. "launch all your missiles per second fire for 3s",
        icon = DCEI.Texture("flat_icon_emoji_fire_1f525_ipick"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnUltmateAttackLaunch,
        non_scaling_values = {
            trigger_interval = 1,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_fire_1f525_ipick"),
            duration = 3,
        },
    },
    -- wraith
    {
        id = "enter_wraith",
        display_name = Api.GetTranslationText("combat/perk/enter_wraith/name"),
        description = Api.GetTranslationText(
            "combat/perk/enter_wraith/description",
            { x = TAG.overclock, y = TAG.wraith }
        ),
        icon = DCEI.Texture("smh_enter_wraith"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "wraith",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnBattleStart,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_pouting_face_1f621_ipick"),
            description = Api.GetTranslationText("combat/tooltip/wraith/description"),
            duration = 3,
        },
        scaling_values = {
            stack = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "stack" },
            },
            {
                address = { "behavior", "duration" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "long_wraith",
        display_name = Api.GetTranslationText("combat/perk/long_wraith/name"),
        description = Api.GetTranslationText("combat/perk/long_wraith/description", { x = TAG.wraith }),
        icon = DCEI.Texture("smh_longer_wraith"),
        extra_tooltips = {
            {
                name = "wraith",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            extra_duration = 2,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "extra_duration" },
            },
        },
    },
    {
        id = "bonus_wraith",
        display_name = Api.GetTranslationText("combat/perk/bonus_wraith/name"),
        description = Api.GetTranslationText("combat/perk/bonus_wraith/description", { x = TAG.wraith }),
        icon = DCEI.Texture("smh_bonus_wraith"),
        extra_tooltips = {
            {
                name = "wraith",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            extra_damage = 0.2,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "extra_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "super_wraith",
        display_name = Api.GetTranslationText("combat/perk/super_wraith/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_wraith/description",
            { x = TAG.wraith, y = TAG.attack_speed }
        ),
        icon = DCEI.Texture("smh_super_wraith"),
        extra_tooltips = {
            {
                name = "wraith",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_super_wraith"),
            duration = 3,
            non_scaling_attributes = {
                attack_speed = 0.5,
            },
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
                is_scalable_behavior_description = true,
            },
        },
    },
    -- calm
    {
        id = "enter_calm",
        display_name = Api.GetTranslationText("combat/perk/enter_calm/name"),
        description = Api.GetTranslationText(
            "combat/perk/enter_wraith/description",
            { x = TAG.overclock, y = TAG.calm }
        ),
        icon = DCEI.Texture("smh_enter_calm"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "calm",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.OnBattleStart,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_cryface"),
            description = Api.GetTranslationText("combat/tooltip/calm/description"),
            duration = 3,
        },
        scaling_values = {
            stack = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "stack" },
            },
            {
                address = { "behavior", "duration" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "long_calm",
        display_name = Api.GetTranslationText("combat/perk/long_calm/name"),
        description = Api.GetTranslationText("combat/perk/long_wraith/description", { x = TAG.calm }),
        icon = DCEI.Texture("smh_longer_calm"),
        extra_tooltips = {
            {
                name = "calm",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            extra_duration = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "extra_duration" },
            },
        },
    },
    {
        id = "bonus_calm",
        display_name = Api.GetTranslationText("combat/perk/bonus_calm/name"),
        description = Api.GetTranslationText("combat/perk/bonus_calm/description", { x = TAG.calm }),
        icon = DCEI.Texture("smh_bonus_calm"),
        extra_tooltips = {
            {
                name = "calm",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            extra_damage = 0.05,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "scaling_values", "extra_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "super_calm",
        display_name = Api.GetTranslationText("combat/perk/super_calm/name"),
        description = Api.GetTranslationText("combat/perk/super_wraith/description", { x = TAG.calm, y = TAG.armor }),
        icon = DCEI.Texture("smh_super_calm"),
        extra_tooltips = {
            {
                name = "calm",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_super_calm"),
            duration = 3,
            non_scaling_attributes = {
                block = 12,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "block" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "remove_attack_bomb",
        display_name = Api.GetTranslationText("combat/perk/remove_attack_bomb/name"),
        description = Api.GetTranslationText("combat/perk/remove_attack_bomb/description", { x = ATTACK_ICON.bomb }),
        icon = DCEI.Texture("smh_remove_attack_bomb"),
        extra_tooltips = {
            {
                name = "attack_bomb",
                type = TOOLTIP_TYPES.missile,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        non_scaling_values = {
            attack_bomb = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "attack_bomb" },
            },
        },
    },
    {
        id = "weaker_bomb",
        display_name = Api.GetTranslationText("combat/perk/weaker_bomb/name"),
        description = Api.GetTranslationText("combat/perk/weaker_bomb/description", { x = ATTACK_ICON.bomb }),
        icon = DCEI.Texture("smh_weaker_bomb"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "attack_bomb",
                type = TOOLTIP_TYPES.missile,
            },
        },
        rarity = "rare",
        max_level = 4,
        is_player_only = true,
        scaling_values = {
            damage_control = 0.25,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "damage_control" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "crush_on_bomb",
        display_name = Api.GetTranslationText("combat/perk/crush_on_bomb/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.axe, y = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_crush_on_bomb"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "attack_bomb",
                type = TOOLTIP_TYPES.missile,
            },
        },
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.5,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "bomb_quest",
        display_name = Api.GetTranslationText("combat/perk/bomb_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/milk_quest/description",
            { x = ATTACK_ICON.bomb, y = TAG.energy_regen }
        ),
        icon = DCEI.Texture("smh_bomb_quest"),
        extra_tooltips = {
            {
                name = "attack_bomb",
                type = TOOLTIP_TYPES.missile,
            },
        },
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            quest_count = 5,
        },
        scaling_values = {
            energy_per_second = 1,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "quest_count" },
            },
            {
                address = { "scaling_values", "energy_per_second" },
            },
        },
    },
    -- ANCHOR Shop
    {
        id = "coupon",
        display_name = Api.GetTranslationText("combat/perk/coupon/name"),
        description = Api.GetTranslationText("combat/perk/coupon/description"),
        icon = DCEI.Texture("smh_coupon"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        modify_attributes = {
            discount = 0.1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "discount" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "more_item",
        display_name = Api.GetTranslationText("combat/perk/more_item/name"),
        description = Api.GetTranslationText("combat/perk/more_item/description"),
        icon = DCEI.Texture("more_item"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        modify_attributes = {
            shop_extra_perk = 1,
            shop_extra_relic = 1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "shop_extra_perk" },
            },
        },
    },
    {
        id = "reroll_shop",
        display_name = Api.GetTranslationText("combat/perk/reroll_shop/name"),
        description = Api.GetTranslationText("combat/perk/reroll_shop/description"),
        icon = DCEI.Texture("reroll_shop"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        modify_attributes = {
            free_rolls = 1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "free_rolls" },
            },
        },
    },
    {
        id = "reward_item",
        display_name = Api.GetTranslationText("combat/perk/reward_item/name"),
        description = Api.GetTranslationText("combat/perk/description/name"),
        icon = DCEI.Texture("reward_item"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            value = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "value" },
            },
        },
    },
    -- ANCHOR Blank Perk
    {
        id = "perk_slot_common",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_slot_common/name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_slot_common/description",
            { x = TAG.empty_card_slot }
        ),
        icon = DCEI.Texture("retro_icon_panel_relic_white_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "common",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        non_scaling_values = {
            count = 1,
        },
        exclusive_picks = { "perk_slot_rare", "perk_slot_epic", "perk_slot_legendary" },
    },
    {
        id = "perk_slot_rare",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_slot_rare/name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_slot_generic/description",
            { x = TAG.empty_card_slot, y = TAG.energy_regen, z = TAG.print }
        ),
        icon = DCEI.Texture("retro_icon_panel_relic_blue_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "rare",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        exclusive_picks = { "perk_slot_common", "perk_slot_epic", "perk_slot_legendary" },
        non_scaling_values = {
            count = 1,
            energy_per_second = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "energy_per_second" },
            },
        },
    },
    {
        id = "perk_slot_epic",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_slot_epic/name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_slot_epic/description",
            { x = TAG.empty_card_slot, y = TAG.copy }
        ),
        icon = DCEI.Texture("retro_icon_panel_relic_purple_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "epic",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        exclusive_picks = { "perk_slot_rare", "perk_slot_common", "perk_slot_legendary" },
        non_scaling_values = {
            count = 2,
        },
    },
    {
        id = "perk_slot_legendary",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_slot_legendary/name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_slot_legnedary/description",
            { x = TAG.empty_card_slot }
        ),
        icon = DCEI.Texture("retro_icon_panel_relic_yellow_ipick"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "legendary",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        exclusive_picks = { "perk_slot_rare", "perk_slot_epic", "perk_slot_common" },
        non_scaling_values = {
            count = 3,
        },
    },
    {
        id = "blank_perk_on_ultimate",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_ultimate/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_ultimate/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_on_ultimate/description",
            { x = TAG.empty_card, y = TAG.overclock }
        ),
        icon = DCEI.Texture("smh_ultimate_empty_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "rare",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "overclock",
        non_scaling_values = {
            perk_count = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "perk_count" },
            },
        },
    },

    {
        id = "blank_perk_on_start",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_start/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_start/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_on_ultimate/description",
            { x = TAG.empty_card, y = TAG.startup }
        ),
        icon = DCEI.Texture("smh_ultimate_empty_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "common",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "startup",
        non_scaling_values = {
            perk_count = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "perk_count" },
            },
        },
    },

    {
        id = "attack_tomato",
        display_name = Api.GetTranslationText("combat/perk/attack_tomato/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_tomato/description",
            { x = ATTACK_ICON.tomato, y = TAG.attack, z = TAG.luck }
        ),
        icon = DCEI.Texture("smh_tomato"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_tomato = 1,
        },
        is_player_only = true,
        non_scaling_values = {
            damage = 0.66,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "blank_perk_on_rock",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_rock/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_rock/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_on_hit/description",
            { x = TAG.empty_card, y = ATTACK_ICON.rock }
        ),
        icon = DCEI.Texture("smh_empty_rock_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "legendary",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "on_rock_up",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "on_rock_up",
        non_scaling_values = {
            perk_count = 2,
            hit_count = 20,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "hit_count" },
            },
        },
    },
    {
        id = "blank_perk_on_crush",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_crush/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_crush/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_on_hit/description",
            { x = TAG.empty_card, y = ATTACK_ICON.axe }
        ),
        icon = DCEI.Texture("smh_empty_crush_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "common",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "on_crush_up",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "on_crush_up",
        non_scaling_values = {
            perk_count = 2,
            hit_count = 20,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "hit_count" },
            },
        },
    },
    {
        id = "blank_perk_on_hit",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_hit/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_hit/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_on_hit/description",
            { x = TAG.empty_card, y = ATTACK_ICON.tomato }
        ),
        icon = DCEI.Texture("smh_empty_tomato_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "rare",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "on_hit_up",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "on_hit_up",
        non_scaling_values = {
            perk_count = 2,
            hit_count = 30,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "hit_count" },
            },
        },
    },
    {
        id = "rock_on_tomato",
        display_name = Api.GetTranslationText("combat/perk/rock_on_tomato/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.rock, y = ATTACK_ICON.tomato }
        ),
        extra_tooltips = {
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_rock_on_tomato"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "bonus_tomato_card",
        display_name = Api.GetTranslationText("combat/perk/bonus_tomato_card/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_tomato_card/description",
            { x = ATTACK_ICON.tomato, y = TAG.empty_card }
        ),
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_bonus_tomato_card"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        max_level = 3,
        unprintable = true,
        non_scaling_values = {
            modify_ratio = -0.2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "modify_ratio" },
                display_type = DisplayType.Percent,
            },
        },
    },

    {
        id = "bonus_tomato",
        display_name = Api.GetTranslationText("combat/perk/bonus_tomato/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_tomato/description",
            { x = ATTACK_ICON.tomato, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_bonus_tomato"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        scaling_values = {
            bonus = 0.2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "growing_tomato",
        display_name = Api.GetTranslationText("combat/perk/growing_tomato/name"),
        description = Api.GetTranslationText(
            "combat/perk/growing_g/description",
            { x = TAG.finish_card, y = ATTACK_ICON.tomato }
        ),
        extra_tooltips = {
            {
                name = "finish_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_growing_tomato"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        unprintable = true,
        non_scaling_values = {
            count = 2,
        },
        is_player_only = true,
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
        },
    },
    {
        id = "growing_g",
        display_name = Api.GetTranslationText("combat/perk/growing_g/name"),
        description = Api.GetTranslationText(
            "combat/perk/growing_g/description",
            { x = TAG.print, y = RELIC_ICON.cockroach }
        ),
        extra_tooltips = {
            {
                name = "print",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "cockroach",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_cockroach_1fab3"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        unprintable = true,
        non_scaling_values = {
            count = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
        },
    },
    {
        id = "gain_g",
        display_name = Api.GetTranslationText("combat/perk/gain_g/name"),
        description = Api.GetTranslationText("combat/perk/gain_g/description", { x = RELIC_ICON.cockroach }),
        extra_tooltips = {
            {
                name = "cockroach",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_roach"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            count = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
        },
    },
    {
        id = "mind_flare",
        display_name = Api.GetTranslationText("combat/perk/mind_flare/name"),
        description = Api.GetTranslationText("combat/perk/mind_flare/description", { x = RELIC_ICON.cockroach }),
        extra_tooltips = {
            {
                name = "cockroach",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_mind_flare"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            time = 3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "time" },
            },
        },
    },
    {
        id = "print_heal",
        display_name = Api.GetTranslationText("combat/perk/print_heal/name"),
        description = Api.GetTranslationText("combat/perk/print_heal/description"),
        icon = DCEI.Texture("smh_wok"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        non_scaling_values = {
            heal = 100,
        },
        extra_tooltips = {
            {
                name = "print_only",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "heal" },
            },
        },
    },
    {
        id = "copy_gold",
        display_name = Api.GetTranslationText("combat/perk/copy_gold/name"),
        description = Api.GetTranslationText("combat/perk/copy_gold/description", { x = TAG.copy }),
        icon = DCEI.Texture("smh_copy_gold"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "copy",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "common",
        is_player_only = true,
        is_copy = true,
        non_scaling_values = {
            gold = 3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "gold" },
            },
        },
    },
    {
        id = "copy_crit",
        display_name = Api.GetTranslationText("combat/perk/copy_crit/name"),
        description = Api.GetTranslationText(
            "combat/perk/copy_crit/description",
            { x = TAG.copy, y = TAG.crit_chance }
        ),
        icon = DCEI.Texture("smh_copy_crit"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "copy",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "rare",
        is_player_only = true,
        is_copy = true,
        non_scaling_values = {
            crit_chance = 0.02,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "copy_luck",
        display_name = Api.GetTranslationText("combat/perk/copy_luck/name"),
        description = Api.GetTranslationText("combat/perk/copy_crit/description", { x = TAG.copy, y = TAG.luck }),
        icon = DCEI.Texture("smh_copy_luck"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "copy",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        is_player_only = true,
        is_copy = true,
        non_scaling_values = {
            luck = 0.09,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "bonus_copy",
        display_name = Api.GetTranslationText("combat/perk/bonus_copy/name"),
        description = Api.GetTranslationText("combat/perk/bonus_copy/description", { x = TAG.copy_piece }),
        icon = DCEI.Texture("smh_bonus_copy"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "copy",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "legendary",
        is_player_only = true,
        unprintable = true,
        is_copy = true,
        modify_attributes = {
            copy = 1,
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "copy" },
            },
        },
    },
    {
        id = "permanent_slot",
        display_name = Api.GetTranslationText("combat/perk/permanent_slot/name"),
        description = Api.GetTranslationText(
            "combat/perk/permanent_slot/description",
            { x = TAG.empty_card, y = TAG.empty_card_slot }
        ),
        icon = DCEI.Texture("retro_icon_panel_perk_purple_ipick"),
        perk_type = PERK_TYPE.perk.id,
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        is_player_only = true,
        unprintable = true,
        non_scaling_values = {
            slot = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "slot" },
            },
        },
    },
    {
        id = "blank_perk_quest",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_quest/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_quest/alternative_name"),
        description = Api.GetTranslationText(
            "combat/perk/blank_perk_quest/description",
            { x = TAG.empty_card, y = ATTACK_ICON.tomato }
        ),
        icon = DCEI.Texture("smh_permanent_tomato_card"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "legendary",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_permanent",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "on_hit_up",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "on_hit_up",
        non_scaling_values = {
            hit_count = 200,
            perk_count = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "hit_count" },
            },
        },
    },
    {
        id = "energy_regen_on_copy",
        display_name = Api.GetTranslationText("combat/perk/energy_regen_on_copy/name"),
        description = Api.GetTranslationText(
            "combat/perk/growing_g/description",
            { x = TAG.print, y = TAG.energy_regen }
        ),
        extra_tooltips = {
            {
                name = "print",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_energy_regen_on_copy"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        unprintable = true,
        non_scaling_values = {
            energy_per_second = 15,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "energy_per_second" },
            },
        },
    },
    {
        id = "third_card_copy",
        display_name = Api.GetTranslationText("combat/perk/third_card_copy/name"),
        description = Api.GetTranslationText(
            "combat/perk/third_card_copy/description",
            { x = TAG.empty_card_slot, y = TAG.print }
        ),
        extra_tooltips = {
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "print",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_third_card_copy"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        unprintable = true,
        non_scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
            },
        },
    },
    {
        id = "duplicate_on_copy",
        display_name = Api.GetTranslationText("combat/perk/duplicate_on_copy/name"),
        description = Api.GetTranslationText(
            "combat/perk/duplicate_on_copy/description",
            { x = TAG.finish_card, y = TAG.empty_card }
        ),
        extra_tooltips = {
            {
                name = "print_only",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "finish_card",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        is_player_only = true,
        print_only = true,
        icon = DCEI.Texture("smh_duplicate_on_copy"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
    },
    {
        id = "repeat_first_fifth",
        display_name = Api.GetTranslationText("combat/perk/repeat_first_fifth/name"),
        description = Api.GetTranslationText("combat/perk/repeat_first_fifth/description"),
        is_player_only = true,
        icon = DCEI.Texture("smh_energy_regen_on_copy"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        extra_tooltips = {
            {
                name = "print_only",
                type = TOOLTIP_TYPES.keyword,
            },
        },
    },
    {
        id = "triple_mark",
        display_name = Api.GetTranslationText("combat/perk/triple_mark/name"),
        description = Api.GetTranslationText("combat/perk/triple_mark/description"),
        is_player_only = true,
        icon = DCEI.Texture("smh_third_card_copy"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        extra_tooltips = {
            {
                name = "print_only",
                type = TOOLTIP_TYPES.keyword,
            },
        },
    },
    {
        id = "blank_perk_on_dodge",
        display_name = Api.GetTranslationText("combat/perk/blank_perk_on_dodge/name"),
        -- Used when the blank perk is completed.
        alternative_display_name = Api.GetTranslationText("combat/perk/blank_perk_on_dodge/alternative_name"),
        description = Api.GetTranslationText("combat/perk/blank_perk_on_dodge/description", { x = TAG.empty_card }),
        icon = DCEI.Texture("smh_dodge_empty_perk"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        is_blank_perk = true,
        rarity = "common",
        extra_tooltips = {
            {
                name = "empty_card",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "empty_card_slot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "on_dodge_up",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        trigger_id = "on_dodge_up",
        non_scaling_values = {
            perk_count = 2,
            dodge_count = 20,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "dodge_count" },
            },
        },
    },
    {
        id = "rock_as_tomato",
        display_name = Api.GetTranslationText("combat/perk/rock_as_tomato/name"),
        description = Api.GetTranslationText(
            "combat/perk/rock_as_tomato/description",
            { x = ATTACK_ICON.rock, y = ATTACK_ICON.tomato }
        ),
        extra_tooltips = {
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_rock_as_tomato"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.33,
            count = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "non_scaling_values", "count" },
            },
        },
    },
    {
        id = "luck_on_print",
        display_name = Api.GetTranslationText("combat/perk/luck_on_print/name"),
        description = Api.GetTranslationText("combat/perk/growing_g/description", { x = TAG.print, y = TAG.luck }),
        extra_tooltips = {
            {
                name = "print",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "unprintable",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("smh_luck_on_print"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        unprintable = true,
        non_scaling_values = {
            luck = 0.1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "luck" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "tomato_on_crit",
        display_name = Api.GetTranslationText("combat/perk/tomato_on_crit/name"),
        description = Api.GetTranslationText("combat/perk/lifesteal_on_crit/description", { x = ATTACK_ICON.tomato }),
        extra_tooltips = {
            {
                name = "attack_tomato",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_tomato_on_crit"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            attack_tomato = 1,
        },
        non_scaling_values = {
            chance = 0.3,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "scaling_values", "attack_tomato" },
            },
        },
    },
    -- ANCHOR Eureka
    {
        id = "eureka_attack",
        display_name = Api.GetTranslationText("combat/perk/eureka_attack/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.attack }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                attack = 2,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack" },
            },
        },
    },
    {
        id = "eureka_dodge",
        display_name = Api.GetTranslationText("combat/perk/eureka_dodge/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.dodge_chance }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.dodge_chance }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                dodge_chance = 0.05,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "dodge_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "eureka_crit",
        display_name = Api.GetTranslationText("combat/perk/eureka_crit/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_chance }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_chance }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                crit_chance = 0.02,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "crit_chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "eureka_crit_damage",
        display_name = Api.GetTranslationText("combat/perk/eureka_crit_damage/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_damage }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.crit_damage }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                crit_damage = 0.33,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "crit_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "eureka_block",
        display_name = Api.GetTranslationText("combat/perk/eureka_block/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.armor }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.armor }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                block = 4,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "block" },
            },
        },
    },
    {
        id = "eureka_energy_regen",
        display_name = Api.GetTranslationText("combat/perk/eureka_energy_regen/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.energy_regen }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.energy_regen }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                energy_per_second = 33,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "energy_per_second" },
            },
        },
    },
    {
        id = "eureka_ultimate_damage",
        display_name = Api.GetTranslationText("combat/perk/eureka_ultimate_damage/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.ultimate_damage }),
        icon = DCEI.Texture("eureka_in_jail"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        behavior = {
            description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.ultimate_damage }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("eureka_in_jail"),
            non_scaling_attributes = {
                ultimate_damage = 0.1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "ultimate_damage" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "buff_let_me_see",
        display_name = Api.GetTranslationText("combat/perk/buff_let_me_see/name"),
        description = Api.GetTranslationText(
            "combat/perk/buff_let_me_see/description",
            { x = TAG.energy_regen, y = ATTACK_ICON.flex, z = ATTACK_ICON.rock }
        ),
        icon = DCEI.Texture("let_me_see"),
        rarity = "legendary",
        non_scaling_values = {
            attack_flex = 10,
            attack_rock = 10,
        },
        behavior = {
            buff_bar_icon = DCEI.Texture("let_me_see"),
            non_scaling_attributes = {
                energy_per_second = -960,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "energy_per_second" },
            },
            {
                address = { "non_scaling_values", "attack_flex" },
            },
            {
                address = { "non_scaling_values", "attack_rock" },
            },
        },
    },
    {
        id = "approaching_storm_dodge",
        display_name = Api.GetTranslationText("combat/perk/approaching_storm_dodge/name"),
        description = Api.GetTranslationText("combat/perk/gain_generic/description", { x = TAG.thorns }),
        icon = DCEI.Texture("smh_approaching_storm"),
        rarity = "common",
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_approaching_storm"),
            non_scaling_attributes = {
                retaliate = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "retaliate" },
            },
        },
    },
    -- ANCHOR Flex
    {
        id = "attack_flex",
        display_name = Api.GetTranslationText("combat/perk/attack_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_flex/description",
            { x = ATTACK_ICON.flex, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_flexed_biceps_1f4aa_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_flex = 1,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/generic_increase/description", { x = TAG.attack }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_flexed_biceps_1f4aa_ipick"),
            non_scaling_attributes = {
                attack = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "attack_flex_rare",
        display_name = Api.GetTranslationText("combat/perk/attack_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_flex/description",
            { x = ATTACK_ICON.flex, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_flexed_biceps_1f4aa_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "rare",
        attacks = {
            attack_flex = 1,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/generic_increase/description", { x = TAG.attack }),
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_flexed_biceps_1f4aa_ipick"),
            non_scaling_attributes = {
                attack = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack" },
                is_scalable_behavior_description = true,
            },
        },
    },

    {
        id = "bonus_flex",
        display_name = Api.GetTranslationText("combat/perk/bonus_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_flex/description",
            { x = ATTACK_ICON.flex, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_person_lifting_weights_1f3cb_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        non_scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
            },
        },
    },
    {
        id = "flex_quest",
        display_name = Api.GetTranslationText("combat/perk/flex_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/flex_quest/description",
            { x = ATTACK_ICON.flex, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_person_lifting_weights_1f3cb_fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,

        non_scaling_values = {
            count = 66, -- need to change the max value in attribute data
        },
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "super_flex",
        display_name = Api.GetTranslationText("combat/perk/super_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_flex/description",
            { x = ATTACK_ICON.flex, y = TAG.attack_speed }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_speed",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_gorilla_1f98d_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        behavior = {
            is_positive = true,
            description = Api.GetTranslationText("combat/behavior/super_flex/description", { x = TAG.attack_speed }),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_gorilla_1f98d_ipick"),
            non_scaling_attributes = {
                attack_speed = 0.01,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "attack_speed" },
                is_scalable_behavior_description = true,
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "flex_on_start",
        display_name = Api.GetTranslationText("combat/perk/flex_on_start/name"),
        description = Api.GetTranslationText("combat/perk/flex_on_start/description", { x = ATTACK_ICON.flex }),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f9be_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "legendary",
        scaling_values = {
            number = 6,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "number" },
            },
        },
    },
    {
        id = "dragon_on_start",
        display_name = "投卵问路",
        description = "战斗开始时立刻发射[VAR1]个" .. ATTACK_ICON.dragon,
        extra_tooltips = {
            {
                name = "attack_dragon",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_dragon_on_start"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "common",
        scaling_values = {
            number = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "number" },
            },
        },
    },
    {
        id = "flex_on_flex",
        display_name = Api.GetTranslationText("combat/perk/damage_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.flex, y = ATTACK_ICON.flex }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f9be_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "legendary",
        non_scaling_values = {
            chance = 0.2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "dragon_on_dragon",
        display_name = "龙上加龙",
        description = ATTACK_ICON.dragon .. "击中目标时[VAR1]几率再发生一个" .. ATTACK_ICON.dragon,
        extra_tooltips = {
            {
                name = "attack_dragon",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_dragon_on_dragon"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "epic",
        non_scaling_values = {
            chance = 0.15,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "damage_flex",
        display_name = Api.GetTranslationText("combat/perk/damage_flex/name"),
        description = Api.GetTranslationText(
            "combat/perk/extra_damage_generic/description",
            { x = ATTACK_ICON.flex, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f9be_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "legendary",
        scaling_values = {
            number = 0.5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "number" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "damage_poo",
        display_name = Api.GetTranslationText("combat/perk/damage_poo/name"),
        description = Api.GetTranslationText(
            "combat/perk/extra_damage_generic/description",
            { x = ATTACK_ICON.poo, y = TAG.health }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "health_maximum",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f922_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "legendary",
        scaling_values = {
            number = 0.01,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "number" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "damage_brain",
        display_name = Api.GetTranslationText("combat/perk/damage_brain/name"),
        description = Api.GetTranslationText(
            "combat/perk/extra_damage_generic/description",
            { x = ATTACK_ICON.brain, y = TAG.income }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "income",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_money_mouth_face_1f911_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",

        scaling_values = {
            number = 2,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "number" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Brain
    {
        id = "attack_brain",
        display_name = Api.GetTranslationText("combat/perk/attack_brain/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_brain/description",
            { x = ATTACK_ICON.brain, y = TAG.energy }
        ),
        icon = DCEI.Texture("flat_icon_emoji_brain_1f9e0_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_brain = 1,
        },
        non_scaling_values = {
            energy = -20,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "energy" },
            },
        },
    },

    {
        id = "bonus_brain",
        display_name = Api.GetTranslationText("combat/perk/bonus_brain/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_brain/description",
            { x = ATTACK_ICON.brain, y = TAG.energy }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_graduation_cap_1f393_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",

        scaling_values = {
            bonus = -10,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "super_brain",
        display_name = Api.GetTranslationText("combat/perk/super_brain/name"),
        description = Api.GetTranslationText(
            "combat/perk/super_brain/description",
            { x = ATTACK_ICON.brain, y = TAG.energy }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_exploding_head_1f92f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        scaling_values = {
            energy_percent = 0.5,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_percent" },
                display_type = DisplayType.Percent,
            },
        },
    },
    -- ANCHOR Oil
    {
        id = "attack_oil",
        display_name = Api.GetTranslationText("combat/perk/attack_oil/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_oil/description",
            { x = ATTACK_ICON.oil, y = TAG.oil }
        ),
        icon = DCEI.Texture("flat_icon_emoji_oil_drum_1f6e2_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_oil = 1,
        },
        non_scaling_values = {
            stack_count = 1,
            overload_count = 10,
            ignite_oil_damage = 444,
        },
        behavior = {
            description = "At [VAR2] " .. TAG.oil .. ", ignite for [VAR3] damage",
            is_positive = false,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_oil_droplet_1f4a7_ipick"),
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "stack_count" },
            },
            {
                address = { "non_scaling_values", "overload_count" },
            },
            {
                address = { "non_scaling_values", "ignite_oil_damage" },
            },
        },
    },
    {
        id = "attack_oil_rare",
        display_name = Api.GetTranslationText("combat/perk/attack_oil/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_oil/description",
            { x = ATTACK_ICON.oil, y = TAG.oil }
        ),
        icon = DCEI.Texture("flat_icon_emoji_oil_drum_1f6e2_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "rare",
        attacks = {
            attack_oil = 1,
        },
        description_replacement_values = {
            {
                address = { "attacks", "attack_oil" },
            },
        },
    },

    -- ANCHOR Poo
    {
        id = "attack_poo",
        display_name = Api.GetTranslationText("combat/perk/attack_poo/name"),
        description = Api.GetTranslationText("combat/perk/attack_poo/description", { x = ATTACK_ICON.poo }),
        icon = DCEI.Texture("flat_icon_emoji_pile_of_poo_1f4a9_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_poo = 1,
        },
        non_scaling_values = {
            count = 5,
            duration = 3,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/poo/description", { x = ATTACK_ICON.poo }),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_pile_of_poo_1f4a9_ipick"),
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "non_scaling_values", "duration" },
            },
        },
    },

    {
        id = "bonus_poo",
        display_name = Api.GetTranslationText("combat/perk/bonus_poo/name"),
        description = Api.GetTranslationText("combat/perk/bonus_poo/description", { x = ATTACK_ICON.poo }),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_ox_1f402_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        non_scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
            },
        },
    },
    {
        id = "minus_attack_poo",
        display_name = Api.GetTranslationText("combat/perk/minus_attack_poo/name"),
        description = Api.GetTranslationText(
            "combat/perk/minus_attack_poo/description",
            { x = ATTACK_ICON.poo, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_face_vomiting_1f92e_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            -- used for localization: decreased by [x]
            attack = 1,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/generic_decrease/description", { x = TAG.attack }),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_face_vomiting_1f92e_ipick"),
            non_scaling_attributes = {
                attack = -1,
            },
            duration = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "attack" },
                is_scalable_behavior_description = true,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "block_poo",
        display_name = Api.GetTranslationText("combat/perk/block_poo/name"),
        description = Api.GetTranslationText(
            "combat/perk/block_poo/description",
            { x = ATTACK_ICON.poo, y = TAG.armor }
        ),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f9a8_ipick"),
        perk_type = PERK_TYPE.perk.id,

        rarity = "legendary",
        behavior = {
            is_positive = true,
            description = TAG.armor .. " increased by [+VAR1]",
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1f9a8_ipick"),
            non_scaling_attributes = {
                block = 1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "block" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "poolymorph",
        display_name = Api.GetTranslationText("combat/perk/poolymorph/name"),
        description = Api.GetTranslationText("combat/perk/poolymorph/description", { x = ATTACK_ICON.poo }),
        extra_tooltips = {
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_1f922_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        non_scaling_values = {
            count = 5,
        },
        behavior = {
            description = Api.GetTranslationText("combat/behavior/poolymorph/description"),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_1f922_ipick"),
            actor_event_on_apply = "EventPoolymorphyOn",
            actor_event_on_remove = "EventPoolymorphyOff",
            duration = 3,
            non_scaling_attributes = {
                vulnerable = 5,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "behavior", "interval" },
            },
        },
    },
    -- ANCHOR BOSS ONLY
    {
        -- used as hint for pop cat in boss perk previews
        id = "pop_kat_info",
        display_name = Api.GetTranslationText("combat/perk/pop_kat_info/name"),
        description = Api.GetTranslationText("combat/perk/pop_kat_info/description"),
        icon = DCEI.Texture("flat_icon_emoji_bubbles_1fae7_ipick"),
        special_text = "powerful ultimate",
        description_replacement_values = {
            {
                address = { "special_text" },
            },
        },
        is_boss_only = true,
    },
    {
        id = "attack_speed_on_ult",
        display_name = Api.GetTranslationText("combat/relic/attack_speed_on_ult/name"),
        description = Api.GetTranslationText(
            "combat/perk/bubble_tea/description",
            { x = TAG.attack_speed, y = TAG.overclock }
        ),
        icon = DCEI.Texture("smh_attack_speed_on_ult"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "common",
        perk_type = PERK_TYPE.perk.id,
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/generic_increase/description",
                { x = TAG.attack_speed }
            ),
            buff_bar_icon = DCEI.Texture("smh_attack_speed_on_ult"),
            modify_attributes = {
                attack_speed = 0.1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack_speed" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "energy_on_ultimate",
        display_name = Api.GetTranslationText("combat/perk/energy_on_ultimate/name"),
        description = Api.GetTranslationText(
            "combat/perk/energy_on_ultimate/description",
            { x = TAG.overclock, y = TAG.energy }
        ),
        icon = DCEI.Texture("cartoon_icon_gear_lightning_mergewar_smh"),
        extra_tooltips = {
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "rare",
        perk_type = PERK_TYPE.perk.id,
        max_level = 6,
        scaling_values = {
            energy_gain = 150,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_gain" },
            },
        },
    },
    {
        id = "attack_bomb",
        display_name = Api.GetTranslationText("combat/perk/attack_bomb/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_bomb/description",
            { x = ATTACK_ICON.bomb, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_bomb_1f4a3_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_bomb = 1,
        },
    },
    {
        id = "attack_music_note",
        display_name = Api.GetTranslationText("combat/perk/attack_music_note/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_music_note/description",
            { x = ATTACK_ICON.music_note, y = TAG.energy_regen }
        ),
        icon = DCEI.Texture("flat_icon_emoji_musical_note_1f3b5_ipick"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        attacks = {
            attack_music_note = 1,
        },
        behavior = {
            description = Api.GetTranslationText(
                "combat/perk/attack_music_note/behavior_description",
                { x = TAG.energy_regen }
            ),
            is_positive = true,
            duration = 3,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_musical_note_1f3b5_ipick"),
            non_scaling_attributes = {
                energy_per_second = 10,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "non_scaling_attributes", "energy_per_second" },
                is_scalable_behavior_description = true,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "bonus_music_note",
        display_name = Api.GetTranslationText("combat/perk/bonus_music_note/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_flex/description",
            { x = ATTACK_ICON.music_note, y = TAG.energy_regen }
        ),
        extra_tooltips = {
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_level_slider_1f39a_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",

        scaling_values = {
            bonus = 10,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "music_note_lower_max_energy",
        display_name = Api.GetTranslationText("combat/perk/music_note_lower_max_energy/name"),
        description = Api.GetTranslationText(
            "combat/perk/music_note_lower_max_energy/description",
            { x = ATTACK_ICON.music_note, y = TAG.max_energy }
        ),
        extra_tooltips = {
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_singer"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            bonus = 10,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "bonus" },
            },
        },
    },
    {
        id = "brain_on_music_note",
        display_name = Api.GetTranslationText("combat/perk/brain_on_music_note/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.brain, y = ATTACK_ICON.music_note }
        ),
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_composer_woman_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "recruit_band_quest",
        display_name = Api.GetTranslationText("combat/perk/recruit_band_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/recruit_band_quest/description",
            { x = ATTACK_ICON.music_note, y = ATTACK_ICON.music_note }
        ),
        extra_tooltips = {
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "guitar",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "music_keyboard",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "drum",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "singer",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_band_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            count = 120, -- need to change the max value in attribute data
        },
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "attack_coin_bullet",
        display_name = Api.GetTranslationText("combat/perk/attack_coin_bullet/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_coin_bullet/description",
            { x = ATTACK_ICON.coin_bullet, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_coin_1fa99_ipick"),
        perk_type = PERK_TYPE.missile.id,
        is_player_only = true,
        rarity = "common",
        attacks = {
            attack_coin_bullet = 1,
        },
        non_scaling_values = {
            coin_cost = 2,
            attack_boost = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "coin_cost" },
            },
            {
                address = { "non_scaling_values", "attack_boost" },
            },
        },
    },
    {
        id = "coin_bullet_quest",
        display_name = Api.GetTranslationText("combat/perk/coin_bullet_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/coin_bullet_quest/description",
            { x = ATTACK_ICON.coin_bullet, y = TAG.income }
        ),
        extra_tooltips = {
            {
                name = "attack_coin_bullet",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "income",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("flat_icon_emoji_money_wings_1f4b8_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            count = 20, -- need to change the max value in attribute data
        },
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "count" },
            },
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "music_on_coin",
        display_name = Api.GetTranslationText("combat/perk/music_on_coin/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_hit_generic/description",
            { x = ATTACK_ICON.music_note, y = ATTACK_ICON.coin_bullet }
        ),
        extra_tooltips = {
            {
                name = "attack_music_note",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_coin_bullet",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_music_on_coin"),
        perk_type = PERK_TYPE.perk.id,
        is_player_only = true,
        rarity = "epic",
        non_scaling_values = {
            chance = 0.33,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "bonus_coin",
        display_name = Api.GetTranslationText("combat/perk/bonus_coin/name"),
        description = Api.GetTranslationText(
            "combat/perk/bonus_coin/description",
            { x = ATTACK_ICON.coin_bullet, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack_coin_bullet",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
        },
        icon = DCEI.Texture("smh_bonus_coin"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            bonus = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "money_on_damage_quest",
        display_name = Api.GetTranslationText("combat/perk/money_on_damage_quest/name"),
        description = Api.GetTranslationText("combat/perk/money_on_damage_quest/description"),

        icon = DCEI.Texture("flat_icon_emoji_bowing_1f647_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        scaling_values = {
            gold = 10,
        },
        non_scaling_values = {
            damage_taken = 1000,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "gold" },
            },
            {
                address = { "non_scaling_values", "damage_taken" },
            },
        },
    },
    {
        id = "spend_for_income",
        display_name = Api.GetTranslationText("combat/perk/spend_for_income/name"),
        description = Api.GetTranslationText("combat/perk/spend_for_income/description", { x = TAG.income }),
        icon = DCEI.Texture("flat_icon_emoji_monocle_1f9d0_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            gold_cost = 100,
        },
        scaling_values = {
            income = 2,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "gold_cost" },
            },
            {
                address = { "scaling_values", "income" },
            },
        },
    },
    {
        id = "interest",
        display_name = Api.GetTranslationText("combat/perk/interest/name"),
        description = Api.GetTranslationText("combat/perk/interest/description"),
        icon = DCEI.Texture("flat_icon_emoji_bank_1f3e6_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            interest = 0.05,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "interest" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "energy_on_enemy_stun",
        display_name = "Nightmare",
        description = "Gain [+VAR1] " .. TAG.energy .. " when enemy stunned or poolymorphed",
        icon = DCEI.Texture("flat_icon_emoji_ghost_1f47b_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        scaling_values = {
            energy = 50,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy" },
            },
        },
    },
    {
        id = "rock_on_enemy_stun",
        display_name = "Bully",
        description = "Launch [+VAR1]" .. ATTACK_ICON.rock .. " when enemy stunned or poolymorphed",
        icon = DCEI.Texture("flat_icon_emoji_tired_1f62b_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        scaling_values = {
            attack_rock = 1,
        },
        extra_tooltips = {
            {
                name = "attack_rock",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_rock" },
            },
        },
    },
    {
        id = "flex_on_enemy_stun",
        display_name = "Recharge",
        description = "Launch [+VAR1]" .. ATTACK_ICON.flex .. " when enemy stunned or poolymorphed",
        icon = DCEI.Texture("flat_icon_emoji_prepare_1f9d8-200d-2642-fe0f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        scaling_values = {
            attack_flex = 2,
        },
        extra_tooltips = {
            {
                name = "attack_flex",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_flex" },
            },
        },
    },
    {
        id = "attack_poo_energy_steal",
        display_name = "Energy Drain",
        description = "Steal [+VAR1]" .. TAG.energy .. " on " .. ATTACK_ICON.poo .. " hits",
        icon = DCEI.Texture("flat_icon_emoji_shout_shit_u1f62b_u1f4a9_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        scaling_values = {
            energy = 10,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy" },
            },
        },
    },
    {
        id = "rush_vulnerable",
        display_name = "Jump Scare",
        description = TAG.rush .. " apply [+VAR1]" .. TAG.vulnerable .. " for the first [VAR2] secs",
        icon = DCEI.Texture("flat_icon_emoji_jump_scare_1f640_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "rare",
        scaling_values = {
            debuff_number = 5,
        },
        behavior = {
            is_positive = false,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_jump_scare_1f640_ipick"),
            actor_event_on_apply = "EventRushAttackOn",
            actor_event_on_remove = "EventRushAttackOff",
            duration = 3,
            modify_attributes = {
                vulnerable = 5,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "vulnerable" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "rush_energy_reduce_attack_reduce",
        display_name = "Sleepy",
        description = TAG.rush
            .. " Reduces enemy [VAR1]"
            .. TAG.attack
            .. " and [VAR2]"
            .. TAG.energy_regen
            .. " for the first [VAR3] secs",
        icon = DCEI.Texture("flat_icon_emoji_sleepy_1f62a_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        extra_tooltips = {
            {
                name = "rush",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        rarity = "epic",
        scaling_values = {
            attack = -5,
            debuff_energy_regen = -50,
        },
        behavior = {
            is_positive = false,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_sleepy_1f62a_ipick"),
            actor_event_on_apply = "EventRushAttackOn",
            actor_event_on_remove = "EventRushAttackOff",
            duration = 3,
            modify_attributes = {
                attack = -5,
                energy_per_second = -50,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack" },
            },
            {
                address = { "behavior", "modify_attributes", "energy_per_second" },
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "buff_delay_gain_attack_speed",
        display_name = Api.GetTranslationText("combat/status/delay/name"),
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/delay_positive/description",
                { x = TAG.attack_speed }
            ),
            buff_bar_icon = DCEI.Texture("smh_delay"),
            non_scaling_attributes = {
                attack_speed = 0.25,
            },
        },
    },
    {
        id = "buff_delay_lose_attack_speed",
        display_name = Api.GetTranslationText("combat/status/delay_negative/name"),
        behavior = {
            description = Api.GetTranslationText(
                "combat/behavior/delay_negative/description",
                { x = TAG.attack_speed }
            ),
            buff_bar_icon = DCEI.Texture("smh_delay_negative"),
            non_scaling_attributes = {
                attack_speed = -0.25,
            },
        },
    },
    {
        id = "debuff_disable_energy_regen",
        display_name = Api.GetTranslationText("combat/status/disable_energy_regen/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/disable_energy_regen/description"),
            buff_bar_icon = DCEI.Texture("smh_disable_energy_regen"),
        },
    },
    {
        id = "debuff_stun_100ms",
        display_name = Api.GetTranslationText("combat/status/stun/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/stun_on_start/description"),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_dizzy_1f4ab_ipick"),
            actor_event_on_apply = "EventStunOn",
            actor_event_on_remove = "EventStunOff",
            interval = 0.1,
            interval_effect = {
                stun = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "debuff_stun_500ms",
        display_name = Api.GetTranslationText("combat/status/stun/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/stun_on_start/description"),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_dizzy_1f4ab_ipick"),
            actor_event_on_apply = "EventStunOn",
            actor_event_on_remove = "EventStunOff",
            interval = 0.5,
            interval_effect = {
                stun = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },

    {
        id = "debuff_disarm",
        display_name = Api.GetTranslationText("combat/status/disarm/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/disarm/description"),
            buff_bar_icon = DCEI.Texture("wilddefender_icon_close_smh"),
            interval_effect = {
                disarm = true,
            },
        },
    },

    {
        id = "debuff_disarm_3s",
        display_name = Api.GetTranslationText("combat/status/disarm/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/disarm/description"),
            buff_bar_icon = DCEI.Texture("wilddefender_icon_close_smh"),
            interval = 3,
            interval_effect = {
                disarm = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "rush_stun_on_hit",
        display_name = "Paralysis",
        description = TAG.rush .. " [VAR2] chance to stun [+VAR1] seconds on hit for the first [VAR3] secs",
        icon = DCEI.Texture("flat_icon_emoji_shocking_1f635_ipick"),
        perk_type = PERK_TYPE.perk.id,
        triggering_event = GameMechanicTags.TRIGGERING_EVENT_TYPE.Rush,
        rarity = "legendary",
        behavior = {
            is_positive = true,
            description = TAG.rush .. " [VAR2] chance to stun [+VAR1] seconds on hit",
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_shocking_1f635_ipick"),
            actor_event_on_apply = "EventRushAttackOn",
            actor_event_on_remove = "EventRushAttackOff",
            duration = 3,
            non_scaling_values = {
                chance = 0.2,
            },
            scaling_values = {
                stun = 0.1,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "scaling_values", "stun" },
                is_scalable_behavior_description = true,
            },
            {
                address = { "behavior", "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
            {
                address = { "behavior", "duration" },
            },
        },
    },
    {
        id = "heal_on_damage",
        display_name = "Lizard Regen",
        description = "[VAR2] chance to heal [+VAR1] HP when damaged",
        icon = DCEI.Texture("flat_icon_emoji_lizard_1f98e_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        non_scaling_values = {
            chance = 0.09,
        },
        scaling_values = {
            heal = 20,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "heal" },
            },
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "poo_on_block",
        display_name = "Unholy Shield",
        description = Api.GetTranslationText(
            "combat/perk/frost_on_block/description",
            { x = TAG.armor, y = ATTACK_ICON.poo }
        ),
        extra_tooltips = {
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_poo",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_poo_armor"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        non_scaling_values = {
            threshold = 50,
        },
        scaling_values = {
            attack_poo = 1,
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "threshold" },
            },
            {
                address = { "scaling_values", "attack_poo" },
            },
        },
    },
    {
        id = "max_hp_on_damage_quest",
        display_name = "Come More",
        description = "Get [+VAR1]" .. TAG.health .. " for every [VAR2] damage taken",
        icon = DCEI.Texture("smh_enjoy_damage"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        scaling_values = {
            health_maximum = 1,
        },
        non_scaling_values = {
            damage_taken = 300,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "health_maximum" },
            },
            {
                address = { "non_scaling_values", "damage_taken" },
            },
        },
    },
    {
        id = "sleepy_tea_stun_dummy",
        display_name = Api.GetTranslationText("combat/relic/sleepy_tea/name"),
        behavior = {
            description = Api.GetTranslationText("combat/behavior/stun_on_start/description"),
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_blacktea_ipick"),
            actor_event_on_apply = "EventStunOn",
            actor_event_on_remove = "EventStunOff",
            interval = 0.5,
            interval_effect = {
                stun = true,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "interval" },
                is_scalable_behavior_description = true,
            },
        },
    },
    {
        id = "attack_screw",
        display_name = Api.GetTranslationText("combat/perk/attack_screw/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_screw/description",
            { x = ATTACK_ICON.screw, y = TAG.robot }
        ),
        icon = DCEI.Texture("smh_screw"),
        perk_type = PERK_TYPE.missile.id,
        rarity = "common",
        is_player_only = true,
        attacks = {
            attack_screw = 1,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
    },
    {
        id = "screw_on_start",
        display_name = Api.GetTranslationText("combat/perk/screw_on_start/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_start/description",
            { x = TAG.startup, y = ATTACK_ICON.screw }
        ),
        icon = DCEI.Texture("flat_icon_emoji_hot_spring_1f647_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        scaling_values = {
            attack_screw = 4,
        },
        extra_tooltips = {
            {
                name = "attack_screw",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "startup",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_screw" },
            },
        },
    },
    {
        id = "energy_on_screwdriver",
        display_name = Api.GetTranslationText("combat/perk/energy_on_screw/name"),
        description = Api.GetTranslationText(
            "combat/perk/energy_on_screw/description",
            { x = ATTACK_ICON.screwdriver, y = TAG.energy, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_energy_on_screw"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            energy_gain = 10,
        },
        extra_tooltips = {
            {
                name = "attack_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
        },
        attacks = {
            attack_bomb = 1,
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "energy_gain" },
            },
        },
    },
    {
        id = "damage_to_screw",
        display_name = Api.GetTranslationText("combat/perk/damage_to_screw/name"),
        description = Api.GetTranslationText(
            "combat/perk/damage_to_screw/description",
            { x = ATTACK_ICON.screw, y = TAG.attack }
        ),
        extra_tooltips = {
            {
                name = "attack",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_screw",
                type = TOOLTIP_TYPES.missile,
            },
        },
        icon = DCEI.Texture("smh_damage_to_screw"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            attack = 10,
        },
        scaling_values = {
            attack_screw = 1,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("flat_icon_emoji_man_biking_1f6b4_200d_2642_fe0f_ipick"),
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_screw" },
            },
            {
                address = { "non_scaling_values", "attack" },
            },
        },
    },
    {
        id = "screw_on_robot_spawn",
        display_name = Api.GetTranslationText("combat/perk/screw_on_robot_spawn/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_robot_spawn/description",
            { x = ATTACK_ICON.brain, y = TAG.robot, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_artificial_stupid"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        scaling_values = {
            attack_brain = 1,
        },
        non_scaling_values = {
            chance = 0.25,
        },
        extra_tooltips = {
            {
                name = "attack_brain",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_brain" },
            },
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "better_golden_screwdriver",
        display_name = Api.GetTranslationText("combat/perk/better_golden_screwdriver/name"),
        description = Api.GetTranslationText(
            "combat/perk/better_golden_screwdriver/description",
            { x = ATTACK_ICON.golden_screwdriver, y = TAG.robot, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_all_for_one"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            bonus = 1,
        },
        attacks = {
            attack_bomb = 1,
        },
        extra_tooltips = {
            {
                name = "attack_golden_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "bonus" },
            },
        },
    },
    {
        id = "screw_on_block",
        display_name = Api.GetTranslationText("combat/perk/screw_on_block/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_block/description",
            { x = TAG.armor, y = ATTACK_ICON.screw, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("flat_icon_emoji_happy_block_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        non_scaling_values = {
            threshold = 60,
        },
        scaling_values = {
            attack_screw = 1,
        },
        attacks = {
            attack_bomb = 1,
        },
        extra_tooltips = {
            {
                name = "block",
                type = TOOLTIP_TYPES.attribute,
            },
            {
                name = "attack_screw",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "threshold" },
            },
            {
                address = { "scaling_values", "attack_screw" },
            },
        },
    },
    {
        id = "screw_on_ultimate",
        display_name = Api.GetTranslationText("combat/perk/screw_on_ultimate/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_ultimate/description",
            { x = TAG.overclock, y = ATTACK_ICON.screw }
        ),
        icon = DCEI.Texture("flat_icon_emoji_factory_1f3ed_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            attack_screw = 3,
        },
        extra_tooltips = {
            {
                name = "attack_screw",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "overclock",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_screw" },
            },
        },
    },
    {
        id = "screw_on_robot_screwdriver",
        display_name = Api.GetTranslationText("combat/perk/screw_on_robot_screwdriver/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_robot_screwdriver/description",
            { x = ATTACK_ICON.axe, y = ATTACK_ICON.screwdriver }
        ),
        icon = DCEI.Texture("smh_crush_robot"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            chance = 0.15,
        },
        extra_tooltips = {
            {
                name = "attack_crush",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "attack_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "chance" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "golden_screwdriver_on_robot_explosion",
        display_name = Api.GetTranslationText("combat/perk/golden_screwdriver_on_robot_explosion/name"),
        description = Api.GetTranslationText(
            "combat/perk/golden_screwdriver_on_robot_explosion/description",
            { x = TAG.robot_explosion, y = ATTACK_ICON.golden_screwdriver }
        ),
        icon = DCEI.Texture("smh_golden_screwdriver_on_robot_explosion"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        scaling_values = {
            attack_golden_screwdriver = 1,
        },
        max_level = 1,
        extra_tooltips = {
            {
                name = "attack_golden_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "robot_explosion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_golden_screwdriver" },
            },
        },
    },
    {
        id = "screw_on_robot_explosion",
        display_name = Api.GetTranslationText("combat/perk/screw_on_robot_explosion/name"),
        description = Api.GetTranslationText(
            "combat/perk/screw_on_robot_explosion/description",
            { x = TAG.robot_explosion, y = ATTACK_ICON.screw }
        ),
        icon = DCEI.Texture("flat_icon_emoji_recursion_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        scaling_values = {
            attack_screw = 1,
        },
        max_level = 2,
        extra_tooltips = {
            {
                name = "attack_screw",
                type = TOOLTIP_TYPES.missile,
            },
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "robot_explosion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "scaling_values", "attack_screw" },
            },
        },
    },
    {
        id = "heal_on_robot_explosion",
        display_name = Api.GetTranslationText("combat/perk/heal_on_robot_explosion/name"),
        description = Api.GetTranslationText(
            "combat/perk/heal_on_robot_explosion/description",
            { x = TAG.robot_explosion, y = TAG.robot }
        ),
        icon = DCEI.Texture("flat_icon_emoji_ambulance_1f691_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        non_scaling_values = {
            heal = 20,
        },
        extra_tooltips = {
            {
                name = "robot_explosion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "heal" },
            },
        },
    },
    {
        id = "block_on_robot_explosion",
        display_name = Api.GetTranslationText("combat/perk/block_on_robot_explosion/name"),
        description = Api.GetTranslationText(
            "combat/perk/block_on_robot_explosion/description",
            { x = TAG.robot_explosion, y = TAG.attack }
        ),
        icon = DCEI.Texture("smh_block_on_robot_explosion"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,

        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_block_on_robot_explosion"),

            modify_attributes = {
                attack = 5,
            },
        },
        extra_tooltips = {
            {
                name = "robot_explosion",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "attack" },
            },
        },
    },
    {
        id = "block_on_screwdriver",
        display_name = Api.GetTranslationText("combat/perk/block_on_screw/name"),
        description = Api.GetTranslationText(
            "combat/perk/block_on_screw/description",
            { x = ATTACK_ICON.screwdriver, y = TAG.armor, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_block_on_screw"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        non_scaling_values = {
            duration = 1,
        },
        behavior = {
            is_positive = true,
            buff_bar_icon = DCEI.Texture("smh_block_on_screw"),
            duration = 1,
            modify_attributes = {
                block = 1,
            },
        },
        attacks = {
            attack_bomb = 1,
        },
        extra_tooltips = {
            {
                name = "attack_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "behavior", "modify_attributes", "block" },
            },
            {
                address = { "non_scaling_values", "duration" },
            },
        },
    },
    {
        id = "robot_explosion_damage_increase",
        display_name = Api.GetTranslationText("combat/perk/robot_explosion_damage_increase/name"),
        description = Api.GetTranslationText(
            "combat/perk/robot_explosion_damage_increase/description",
            { x = TAG.robot_explosion_damage }
        ),
        icon = DCEI.Texture("flat_icon_emoji_vfx_ipick_impact_normal_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        modify_attributes = {
            robot_explosion_damage_multiplier = 0.5,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "robot_explosion_damage_multiplier" },
                display_type = DisplayType.Percent,
            },
        },
    },
    {
        id = "launch_on_robot_explosion",
        display_name = Api.GetTranslationText("combat/perk/launch_on_robot_explosion/name"),
        description = Api.GetTranslationText(
            "combat/perk/launch_on_robot_explosion/description",
            { x = TAG.robot_explosion, y = ATTACK_ICON.screw, z = ATTACK_ICON.golden_screwdriver }
        ),
        icon = DCEI.Texture("flat_icon_emoji_combet_2604_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
    },
    {
        id = "robot_slot",
        display_name = Api.GetTranslationText("combat/perk/robot_slot/name"),
        description = Api.GetTranslationText("combat/perk/robot_slot/description", { x = TAG.robot }),
        icon = DCEI.Texture("flat_icon_emoji_parking_1f17f_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "common",
        is_player_only = true,
        modify_attributes = {
            robot_slot = 1,
        },
        non_scaling_values = {
            max_slot = 8,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "robot_slot" },
            },
            {
                address = { "non_scaling_values", "max_slot" },
            },
        },
    },
    {
        id = "robot_attack_speed",
        display_name = Api.GetTranslationText("combat/perk/robot_attack_speed/name"),
        description = Api.GetTranslationText(
            "combat/perk/robot_attack_speed/description",
            { x = TAG.robot, y = TAG.robot_base_attack }
        ),
        icon = DCEI.Texture("flat_icon_emoji_alien_1f47d_ipick"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "rare",
        is_player_only = true,
        modify_attributes = {
            robot_base_attack = 5,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
        },
        description_replacement_values = {
            {
                address = { "modify_attributes", "robot_base_attack" },
            },
        },
    },
    {
        id = "attack_golden_screwdriver",
        display_name = Api.GetTranslationText("combat/perk/attack_golden_screwdriver/name"),
        description = Api.GetTranslationText(
            "combat/perk/attack_golden_screwdriver/description",
            { x = ATTACK_ICON.golden_screwdriver, y = TAG.robot, z = ATTACK_ICON.screwdriver, a = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_golden_screwdriver"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "epic",
        is_player_only = true,
        attacks = {
            attack_golden_screwdriver = 1,
            attack_bomb = 1,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "attack_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
        },
    },
    {
        id = "robot_base_attack_on_robot_hit_quest",
        display_name = Api.GetTranslationText("combat/perk/robot_base_attack_on_robot_hit_quest/name"),
        description = Api.GetTranslationText(
            "combat/perk/robot_base_attack_on_robot_hit_quest/description",
            { x = ATTACK_ICON.screwdriver, y = TAG.robot, z = ATTACK_ICON.bomb }
        ),
        icon = DCEI.Texture("smh_tesla_stock"),
        perk_type = PERK_TYPE.perk.id,
        rarity = "legendary",
        is_player_only = true,
        non_scaling_values = {
            threshold = 50,
        },
        scaling_values = {
            robot_base_attack = 1,
        },
        attacks = {
            attack_bomb = 1,
        },
        extra_tooltips = {
            {
                name = "summon_robot",
                type = TOOLTIP_TYPES.keyword,
            },
            {
                name = "attack_screwdriver",
                type = TOOLTIP_TYPES.missile,
            },
        },
        description_replacement_values = {
            {
                address = { "non_scaling_values", "threshold" },
            },
            {
                address = { "scaling_values", "robot_base_attack" },
            },
        },
    },
}

PerkData.data = Util.AssignListToTableByKey(PerkData.PERK_LIST, "id")

-- EXPORT
PerkData.PerkType = PERK_TYPE
return PerkData
