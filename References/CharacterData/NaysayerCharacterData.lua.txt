local PerkChainData = require("NarrativeData/GameplayData/PerkChainData")
local StageSystemShared = require("GameStageSystem/StageSystemShared")
local data = {
    id = "naysayer",
    campaign_id = "demo",
    display_name = Api.GetTranslationText("campaign/character_data/naysayer/name"),
    -- Copy of emoji boy for now
    short_description = Api.GetTranslationText("campaign/character_data/naysayer/short_description"),
    unit = DCEI.Unit("COMBAT Unit Boss Naysayer"),
    icon_low_resolution = DCEI.Texture("comic_portrait_boss_wojakfaceman_152x152_ipick"),
    icon = DCEI.Texture("comic_portrait_boss_wojakfaceman_500x500_ipick"),
    icon_high_resolution = DCEI.Texture("comic_portrait_boss_wojakfaceman_800x1024_ipick"),
    icon_high_resolution_size = { width = 700, height = 800 },
    attack_ids = {
        "attack_rock",
        "attack_rock",
        "attack_rock",
        "attack_rock",
        "attack_rock",
        "attack_rock",
    },
    attributes = {
        health_maximum = 1900,
        attack = 26,
    },
    relics = {
        "perk_reroll_token",
        "perk_reroll_token",
        "perk_reroll_token",
    },
    perks = {},
    perk_chains = {
        PerkChainData.all_perk_chains.gain_attack_chain,
        PerkChainData.all_perk_chains.attack_rock_chain,
        PerkChainData.all_perk_chains.health_regen_chain,
        PerkChainData.all_perk_chains.attack_flex_chain,
        PerkChainData.all_perk_chains.attack_lifesteal_chain,
        PerkChainData.all_perk_chains.attack_crush_chain,
        PerkChainData.all_perk_chains.attack_brain_chain,
        PerkChainData.all_perk_chains.gain_retaliate_chain,
        PerkChainData.all_perk_chains.attack_speed_chain,
        PerkChainData.all_perk_chains.gain_income_chain,
        PerkChainData.all_perk_chains.crit_chain,
        PerkChainData.all_perk_chains.dodge_chain,
        PerkChainData.all_perk_chains.apply_vulnerable_on_start_chain,
        PerkChainData.all_perk_chains.gain_heal_enhancement_chain,
        PerkChainData.all_perk_chains.rush_attack_buff_chain,
        PerkChainData.all_perk_chains.heal_on_rock_chain,
        PerkChainData.all_perk_chains.energy_regen_chain,
        PerkChainData.all_perk_chains.energy_on_ultimate_chain,
        PerkChainData.all_perk_chains.divine_chain
    },
    is_available = true,
    ---@param all_wave_state_machines AllWaveStateMachines
    generate_wave_state_machine_callback = function(
        start_wave,
        max_wave,
        boss_reconcile_choices,
        all_wave_state_machines,
        create_wave_state_callback
    )
        local wave_states = {}
        for i = start_wave, max_wave do
            if i == 1 then
                table.insert(
                    wave_states,
                    create_wave_state_callback(i, function(next, game_data)
                        all_wave_state_machines.default_first_wave_state_machine.start(next, game_data)
                    end)
                )
            elseif i == max_wave then
                table.insert(
                    wave_states,
                    create_wave_state_callback(i, function(next, game_data)
                        all_wave_state_machines.default_final_boss_wave_state_machine.start(next, game_data)
                    end)
                )
            elseif i % StageSystemShared.BOSS_WAVE_INTERVAL == 0 then
                local stage = i / StageSystemShared.BOSS_WAVE_INTERVAL
                if boss_reconcile_choices[stage] then
                    table.insert(
                        wave_states,
                        create_wave_state_callback(i, function(next, game_data)
                            all_wave_state_machines.default_mini_boss_reconcile_wave_state_machine.start(
                                next,
                                game_data
                            )
                        end)
                    )
                else
                    table.insert(
                        wave_states,
                        create_wave_state_callback(i, function(next, game_data)
                            all_wave_state_machines.default_mini_boss_wave_state_machine.start(next, game_data)
                        end)
                    )
                end
            elseif i % StageSystemShared.CHOICE_INTERVAL == StageSystemShared.FIRST_CHOICE_WAVE then
                table.insert(
                    wave_states,
                    create_wave_state_callback(i, function(next, game_data)
                        all_wave_state_machines.default_choice_wave_state_machine.start(next, game_data)
                    end)
                )
            else
                table.insert(
                    wave_states,
                    create_wave_state_callback(i, function(next, game_data)
                        all_wave_state_machines.default_normal_combat_wave_state_machine.start(next, game_data)
                    end)
                )
            end
        end
        return wave_states
    end,
}

return data
